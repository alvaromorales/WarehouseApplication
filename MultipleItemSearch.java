import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.event.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.awt.*;

/**
 * ---------------------------------------------------------------------
 * Warehouse Application
 * The Multiple Item Search screen to find multiple items
 * @author Alvaro Morales
 * @date 10/07/2010
 * @school Markham College
 * @IDE Eclipse SDK
 * @computer IBM ThinkPad R52
 * ---------------------------------------------------------------------
 */
public class MultipleItemSearch extends javax.swing.JPanel {

	/**
	 * Start of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * GUI components generated by Jigloo
	 */
	private JButton btnAdd;
	private JLabel lblRow;
	private JLabel lblAisle;
	private JSeparator spSearch;
	private JComboBox cmbColumn;
	private JComboBox cmbRow;
	private JComboBox cmbAisle;
	private JLabel lblLocation;
	private JLabel lblSearchResultsInfo;
	private JButton btnNextStep;
	private JButton btnSearch;
	private JTextField txtSearchByName;
	private JLabel lblCodeSearchInfo;
	private JRadioButton rbtnExactMatch;
	private JRadioButton rbtnPartialMatch;
	private ButtonGroup btnGroupSearchType;
	private JComboBox cmbGroup;
	private JLabel lblGroup;
	private JLabel lblName;
	private JLabel lblColumn;
	private JButton btnRemove;
	private JList lstItems;
	private JLabel lblItemListInfo;
	private JLabel lblItemList;
	private JTable tblSearchResults;
	private JLabel lblMultipleItemSearch;
	private JSeparator spSearchList;
	private JScrollPane scpSearchResults;
	private JTextField txtSearchByCode;
	private JLabel lblCode;
	private JComboBox cmbSearchCriteria;
	private JLabel lblSearchBy;
	private JLabel lblItemSearchInfo;

	/**
	 * The user that logged in
	 */
	private User user;

	/**
	 * An ArrayList of items to process
	 */
	private ArrayList itemsToProcess;

	/**
	 * The type of transaction
	 */
	private int transactionType;

	/**
	 * Constructs a new MultipleItemSearch object
	 * @param user - the user that logged in
	 * @param transactionType - type of transaction (Item entry or exit)
	 */
	public MultipleItemSearch(User user, int transactionType) {
		super();
		this.user = user;
		this.transactionType = transactionType;
		initGUI();
	}

	/**
	 * Method generated by Jigloo to initialize GUI components
	 */
	private void initGUI() {
		try {
			this.setPreferredSize(new java.awt.Dimension(800, 500));
			this.setSize(800, 500);
			this.setLayout(null);
			{
				lblItemSearchInfo = new JLabel();
				this.add(lblItemSearchInfo);
				lblItemSearchInfo.setText("Select an item and click 'add'");
				lblItemSearchInfo.setBounds(12, 30, 254, 16);
				lblItemSearchInfo.setFont(new java.awt.Font("Dialog",0,10));
			}
			{
				lblMultipleItemSearch = new JLabel();
				this.add(lblMultipleItemSearch);
				lblMultipleItemSearch.setText("1. Multiple Item Search");
				lblMultipleItemSearch.setFont(new java.awt.Font("Dialog",1,14));
				lblMultipleItemSearch.setBounds(12, 10, 171, 16);
			}
			{
				lblSearchBy = new JLabel();
				this.add(lblSearchBy);
				lblSearchBy.setText("Search by:");
				lblSearchBy.setBounds(35, 58, 63, 19);
			}
			{
				ComboBoxModel cmbSearchByModel = 
					new DefaultComboBoxModel(
							new String[] { "Code", "Name", "Group", "Location" });
				cmbSearchCriteria = new JComboBox();
				this.add(cmbSearchCriteria);
				cmbSearchCriteria.setModel(cmbSearchByModel);
				cmbSearchCriteria.setBounds(110, 55, 179, 25);
				cmbSearchCriteria.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						changeSearchCriteria();
					}
				});
			}
			{
				lblCode = new JLabel();
				this.add(lblCode);
				lblCode.setText("Code:");
				lblCode.setBounds(61, 95, 32, 16);
			}
			{
				txtSearchByCode = new JTextField();
				this.add(txtSearchByCode);
				txtSearchByCode.setBounds(110, 91, 220, 24);
				txtSearchByCode.setSize(220, 24);
				txtSearchByCode.setDocument(new TextFieldDigitLimit(6));
			}
			{
				scpSearchResults = new JScrollPane();
				this.add(scpSearchResults);
				scpSearchResults.setBounds(35, 213, 415, 232);
				{
					MultipleSearchResultsTableModel model = new MultipleSearchResultsTableModel(null);
					tblSearchResults = new JTable();
					tblSearchResults.setModel(model);
					scpSearchResults.setViewportView(tblSearchResults);
					tblSearchResults.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
					tblSearchResults.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
					setTableColumnsWidth();
					tblSearchResults.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
						public void valueChanged(ListSelectionEvent e){
							enableAdd(e.getFirstIndex());
						}
					});
					tblSearchResults.addMouseListener(new MouseAdapter() {
						public void mouseClicked(MouseEvent e) {
							if (e.getClickCount() == 2) {
								JTable tblResults = (JTable)e.getSource();
								int row = tblResults.getSelectedRow();
								MultipleSearchResultsTableModel model = 
									(MultipleSearchResultsTableModel) tblSearchResults.getModel();
								Item item = (Item) model.getSearchResults().get(row);
								ItemDescription description = new ItemDescription(item, user);
								description.setVisible(true);

							}
						}
					});


				}
			}
			{
				spSearchList = new JSeparator();
				this.add(spSearchList);
				spSearchList.setBounds(481, 12, 2, 471);
				spSearchList.setOrientation(SwingConstants.VERTICAL);
			}
			{
				itemsToProcess = new ArrayList();
				btnAdd = new JButton();
				this.add(btnAdd);
				btnAdd.setText("Add");
				btnAdd.setBounds(378, 457, 72, 26);
				btnAdd.setEnabled(false);
				btnAdd.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						addItemToList((DefaultListModel)lstItems.getModel());
					}
				});
			}
			{
				lblItemList = new JLabel();
				this.add(lblItemList);
				lblItemList.setText("2. Item List");
				lblItemList.setFont(new java.awt.Font("Dialog",1,14));
				lblItemList.setBounds(501, 10, 101, 16);
			}
			{
				lblItemListInfo = new JLabel();
				this.add(lblItemListInfo);
				lblItemListInfo.setText("To remove an item, select it and click 'remove'");
				lblItemListInfo.setFont(new java.awt.Font("Dialog",0,10));
				lblItemListInfo.setBounds(501, 30, 256, 16);
			}
			{
				DefaultListModel lstItemsModel = new DefaultListModel();
				lstItems = new JList();
				this.add(lstItems);
				lstItems.setModel(lstItemsModel);
				lstItems.setBounds(513, 58, 255, 240);
				lstItems.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
				lstItems.setSize(255, 247);
				lstItems.setAutoscrolls(false);
				lstItems.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
					public void valueChanged(ListSelectionEvent e){
						enableRemove(e.getFirstIndex());
					}
				});
			}
			{
				btnRemove = new JButton();
				this.add(btnRemove);
				btnRemove.setText("Remove");
				btnRemove.setEnabled(false);
				btnRemove.setBounds(689, 317, 80, 26);
				btnRemove.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						removeItemFromList();
						if(lstItems.getModel().getSize() == 0){
							btnRemove.setEnabled(false);
						}
					}
				});
			}
			{
				btnSearch = new JButton();
				this.add(btnSearch);
				btnSearch.setText("Search");
				btnSearch.setBounds(110, 141, 92, 26);
				btnSearch.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						performSearch();
					}
				});
			}
			{
				btnNextStep = new JButton();
				this.add(btnNextStep);
				btnNextStep.setText("Next Step");
				btnNextStep.setBounds(689, 457, 89, 26);
				btnNextStep.addActionListener(new ActionListener(){
					public void actionPerformed(ActionEvent e){
						proceedToProcessing();
					}
				});
			}
			{
				lblSearchResultsInfo = new JLabel();
				this.add(lblSearchResultsInfo);
				lblSearchResultsInfo.setText("Double click on an item to view more information");
				lblSearchResultsInfo.setFont(new java.awt.Font("Dialog",0,10));
				lblSearchResultsInfo.setBounds(35, 185, 275, 16);
			}
			{
				lblLocation = new JLabel();
				this.add(lblLocation);
				lblLocation.setText("Location:");
				lblLocation.setBounds(43, 95, 52, 16);
				lblLocation.setVisible(false);
			}
			{
				ComboBoxModel cmbAisleModel = new DefaultComboBoxModel(MainScreen.locations.getAisles());
				cmbAisle = new JComboBox();
				this.add(cmbAisle);
				cmbAisle.setModel(cmbAisleModel);
				cmbAisle.setBounds(109, 91, 52, 25);
				cmbAisle.setVisible(false);
			}
			{
				ComboBoxModel cmbRowModel = new DefaultComboBoxModel(MainScreen.locations.getRows());
				cmbRow = new JComboBox();
				this.add(cmbRow);
				cmbRow.setModel(cmbRowModel);
				cmbRow.setBounds(171, 91, 52, 25);
				cmbRow.setVisible(false);
			}
			{
				ComboBoxModel cmbColumnModel = new DefaultComboBoxModel(MainScreen.locations.getColumns());
				cmbColumn = new JComboBox();
				this.add(cmbColumn);
				cmbColumn.setModel(cmbColumnModel);
				cmbColumn.setBounds(234, 93, 52, 25);
				cmbColumn.setVisible(false);
			}
			{
				spSearch = new JSeparator();
				this.add(spSearch);
				spSearch.setBounds(12, 177, 452, 10);
			}
			{
				lblAisle = new JLabel();
				this.add(lblAisle);
				lblAisle.setText("Aisle");
				lblAisle.setBounds(125, 117, 25, 16);
				lblAisle.setFont(new java.awt.Font("Dialog",0,10));
				lblAisle.setVisible(false);
			}
			{
				lblRow = new JLabel();
				this.add(lblRow);
				lblRow.setText("Row");
				lblRow.setBounds(183, 117, 25, 16);
				lblRow.setFont(new java.awt.Font("Dialog",0,10));
				lblRow.setVisible(false);
			}
			{
				lblColumn = new JLabel();
				this.add(lblColumn);
				lblColumn.setText("Column");
				lblColumn.setBounds(241, 118, 39, 16);
				lblColumn.setFont(new java.awt.Font("Dialog",0,10));
				lblColumn.setVisible(false);
			}
			{
				lblName = new JLabel();
				this.add(lblName);
				lblName.setText("Name:");
				lblName.setBounds(57, 95, 36, 16);
				lblName.setVisible(false);
			}
			{
				lblGroup = new JLabel();
				this.add(lblGroup);
				lblGroup.setText("Group:");
				lblGroup.setBounds(56, 95, 37, 16);
				lblGroup.setVisible(false);
			}
			{
				ComboBoxModel cmbGroupModel = new DefaultComboBoxModel(MainScreen.groups);
				cmbGroup = new JComboBox();
				this.add(cmbGroup);
				cmbGroup.setModel(cmbGroupModel);
				cmbGroup.setBounds(108, 93, 179, 25);
				cmbGroup.setVisible(false);
			}
			{
				rbtnPartialMatch = new JRadioButton();
				rbtnPartialMatch.setText("Partial Match");
				rbtnPartialMatch.setBounds(346, 64, 106, 24);
				rbtnPartialMatch.setVisible(false);
				this.add(rbtnPartialMatch);
				rbtnPartialMatch.setSelected(true);
				rbtnPartialMatch.setVisible(false);
			}
			{
				rbtnExactMatch = new JRadioButton();
				rbtnExactMatch.setText("Exact Match");
				rbtnExactMatch.setBounds(346, 91, 95, 24);
				this.add(rbtnExactMatch);
				rbtnExactMatch.setVisible(false);
			}
			{
				btnGroupSearchType = new ButtonGroup();
				btnGroupSearchType.add(rbtnPartialMatch);
				btnGroupSearchType.add(rbtnExactMatch);
			}
			{
				lblCodeSearchInfo = new JLabel();
				lblCodeSearchInfo.setText("Only digits");
				lblCodeSearchInfo.setBounds(337, 95, 59, 16);
				lblCodeSearchInfo.setFont(new java.awt.Font("Dialog",0,10));
				this.add(lblCodeSearchInfo);
				lblCodeSearchInfo.setVisible(true);
			}
			{
				txtSearchByName = new JTextField();
				txtSearchByName.setBounds(111, 91, 220, 24);
				this.add(txtSearchByName);
				txtSearchByName.setDocument(new TextFieldLimit(200));
				txtSearchByName.setVisible(false);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * End of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	/**
	 * Updates GUI elements to match the search criteria and type
	 */
	public void changeSearchCriteria(){
		String searchCriteria = (String)cmbSearchCriteria.getSelectedItem();

		if (searchCriteria.equals("Code")) {
			//Enable and display GUI elements for a search by code
			lblCode.setVisible(true);
			txtSearchByCode.setVisible(true);
			txtSearchByCode.setDocument(new TextFieldDigitLimit(6));
			lblCodeSearchInfo.setVisible(true);

			//Disable and make invisible GUI elements for other types of searches
			lblName.setVisible(false);
			txtSearchByName.setVisible(false);
			rbtnPartialMatch.setVisible(false);
			rbtnExactMatch.setVisible(false);

			lblGroup.setVisible(false);
			cmbGroup.setVisible(false);

			lblLocation.setVisible(false);
			lblAisle.setVisible(false);
			lblRow.setVisible(false);
			lblColumn.setVisible(false);
			cmbAisle.setVisible(false);
			cmbRow.setVisible(false);
			cmbColumn.setVisible(false);

			this.validate();
		} else if (searchCriteria.equals("Name")){
			//Enable and display GUI elements for a search by name
			lblName.setVisible(true);
			txtSearchByName.setVisible(true);
			txtSearchByName.setDocument(new TextFieldLimit(200));
			rbtnPartialMatch.setVisible(true);
			rbtnExactMatch.setVisible(true);

			//Disable and make invisible GUI elements for other types of searches
			lblCode.setVisible(false);
			txtSearchByCode.setVisible(false);
			lblCodeSearchInfo.setVisible(false);

			lblGroup.setVisible(false);
			cmbGroup.setVisible(false);

			lblLocation.setVisible(false);
			lblAisle.setVisible(false);
			lblRow.setVisible(false);
			lblColumn.setVisible(false);
			cmbAisle.setVisible(false);
			cmbRow.setVisible(false);
			cmbColumn.setVisible(false);

			this.validate();
		} else if (searchCriteria.equals("Group")){
			//Enable and display GUI elements for a search by group
			lblGroup.setVisible(true);
			cmbGroup.setVisible(true);

			//Disable and make invisible GUI elements for other types of searches
			lblCode.setVisible(false);
			txtSearchByCode.setVisible(false);
			lblCodeSearchInfo.setVisible(false);

			lblName.setVisible(false);
			txtSearchByName.setVisible(false);
			rbtnPartialMatch.setVisible(false);
			rbtnExactMatch.setVisible(false);

			lblLocation.setVisible(false);
			lblAisle.setVisible(false);
			lblRow.setVisible(false);
			lblColumn.setVisible(false);
			cmbAisle.setVisible(false);
			cmbRow.setVisible(false);
			cmbColumn.setVisible(false);

			this.validate();
		} else if(searchCriteria.equals("Location")){
			//Enable and display GUI elements for a search by location
			lblLocation.setVisible(true);
			lblAisle.setVisible(true);
			lblRow.setVisible(true);
			lblColumn.setVisible(true);
			cmbAisle.setVisible(true);
			cmbRow.setVisible(true);
			cmbColumn.setVisible(true);

			//Disable and make invisible GUI elements for other types of searches
			lblCode.setVisible(false);
			txtSearchByCode.setVisible(false);
			lblCodeSearchInfo.setVisible(false);

			lblName.setVisible(false);
			txtSearchByName.setVisible(false);
			rbtnPartialMatch.setVisible(false);
			rbtnExactMatch.setVisible(false);

			lblGroup.setVisible(false);
			cmbGroup.setVisible(false);

			this.validate();
		}
	}

	/**
	 * Performs a search by code on the Code Index Binary Tree.
	 * Updates the table to show the items matching.
	 * If there is no match, the user is alerted.
	 * @param codeToFind - the code of the item to find (the search query)
	 */
	public void performSearchByCode(String codeToFind){

		Item item = MainScreen.codeIndexTree.search(codeToFind);

		if(item == null){
			displayNoResultsMessage();
			txtSearchByCode.setText("");
		} else {
			ArrayList list = new ArrayList();
			list.add(item);
			list.trimToSize();
			tblSearchResults.setModel(new MultipleSearchResultsTableModel(list));
			tblSearchResults.validate();
			setTableColumnsWidth();
		}

	}

	/**
	 * Performs a search by exact name on the Name Index Binary Tree.
	 * Updates the table to show the items matching.
	 * If there is no match, the user is alerted.
	 * @param exactName - the exact name of the item to find (the search query)
	 */
	public void performExactSearchByName(String exactName){
		Item item = MainScreen.nameIndexTree.search(exactName);

		if(item == null){
			displayNoResultsMessage();
			txtSearchByName.setText("");
		} else {
			ArrayList list = new ArrayList();
			list.add(item);
			list.trimToSize();
			tblSearchResults.setModel(new MultipleSearchResultsTableModel(list));
			tblSearchResults.validate();
			setTableColumnsWidth();
		}
	}

	/**
	 * Enables the add button
	 * @param i - the value from a row selection (-1 if no row is selected)
	 */
	public void enableAdd(int i){
		if(i<0){
			btnAdd.setEnabled(false);
		} else {
			btnAdd.setEnabled(true);
		}
	}

	/**
	 * Performs a search by partial name on the Name Index Binary Tree.
	 * @param partialName - the partial match of the name of the item to find (the search query)
	 * Updates the table to show the items matching.
	 * If there is no match, the user is alerted.
	 */
	public void performPartialSearchByName(String partialName){
		ArrayList searchResults = MainScreen.nameIndexTree.partialSearch(partialName);

		if(searchResults == null){
			displayNoResultsMessage();
			txtSearchByName.setText("");
		} else {
			tblSearchResults.setModel(new MultipleSearchResultsTableModel(searchResults));
			tblSearchResults.validate();
			setTableColumnsWidth();
		}
	}

	/**
	 * Alerts the user that no results matching the query have been found and clears the table
	 */
	public void displayNoResultsMessage(){
		JOptionPane.showMessageDialog(this, "No results", "Error", JOptionPane.ERROR_MESSAGE);
		tblSearchResults.setModel(new MultipleSearchResultsTableModel(null));
		tblSearchResults.validate();
		setTableColumnsWidth();
	}

	/**
	 * Performs a search depending on the criteria selected
	 */
	public void performSearch(){
		if (txtSearchByCode.isVisible()) {
			if(!txtSearchByCode.getText().equals("")){
				if(txtSearchByCode.getText().length() != 6){
					JOptionPane.showMessageDialog(this, "You must enter a 6 digit code query", 
							"Error", JOptionPane.ERROR_MESSAGE);
				} else {
					performSearchByCode(txtSearchByCode.getText());
				}
			} else {
				JOptionPane.showMessageDialog(this, "You must enter a search query", 
						"Error", JOptionPane.ERROR_MESSAGE);
			}
		} else if (txtSearchByName.isVisible()){
			if(!txtSearchByName.getText().equals("")){
				if(rbtnExactMatch.isSelected()){
					performExactSearchByName(txtSearchByName.getText());
				} else {
					performPartialSearchByName(txtSearchByName.getText());
				}
			} else {
				JOptionPane.showMessageDialog(this, "You must enter a search query", 
						"Error", JOptionPane.ERROR_MESSAGE);
			}
		} else if (cmbGroup.isVisible()){
			Group group = (Group)cmbGroup.getSelectedItem();
			performSearchByGroup(group.getCode());
		} else if (cmbAisle.isVisible()){
			performSearchByLocation();
		}
	}

	/**
	 * Performs a search by group, updating the table with the search results
	 * @param groupCode - the code of the group (search query)
	 */
	public void performSearchByGroup(short groupCode){
		ArrayList searchResults = Items.searchByGroup(groupCode);
		if(!searchResults.isEmpty()){
			tblSearchResults.setModel(new MultipleSearchResultsTableModel(searchResults));
			tblSearchResults.validate();
			setTableColumnsWidth();
		} else {
			displayNoResultsMessage();
		}
	}


	/**
	 * Performs a search by group, updating the table with the search results
	 * @param groupCode - the code of the group (search query)
	 */
	public void performSearchByLocation(){
		byte warehouse = 1;
		byte aisle = ((Integer)cmbAisle.getSelectedItem()).byteValue();
		char row = ((String)cmbRow.getSelectedItem()).charAt(0);
		byte column = ((Integer)cmbColumn.getSelectedItem()).byteValue();

		Location location = new Location(warehouse, aisle, column, row);
		ArrayList searchResults = Items.searchByLocation(location);
		if(!searchResults.isEmpty() || searchResults == null){
			tblSearchResults.setModel(new MultipleSearchResultsTableModel(searchResults));
			tblSearchResults.validate();
			setTableColumnsWidth();
		} else {
			displayNoResultsMessage();
		}
	}

	/**
	 * Adds a selected item to the Items list if the item is not already in the list
	 */
	public void addItemToList(DefaultListModel listModel){
		int row = tblSearchResults.getSelectedRow();
		MultipleSearchResultsTableModel model = (MultipleSearchResultsTableModel) tblSearchResults.getModel();
		Item item = (Item) model.getSearchResults().get(row);	//The item to add

		boolean isRepeated = false;

		for(int i=0; i<lstItems.getModel().getSize();i++){
			Item currentItem = (Item)lstItems.getModel().getElementAt(i);
			if(currentItem.getID() == item.getID()){
				isRepeated = true;
			}
		}

		if(transactionType == ApplicationConstants.ITEM_EXIT){
			int quantity = ((Integer)model.getValueAt(row, 3)).intValue();
			if(!isRepeated && quantity > 0){
				listModel.addElement(item);
				lstItems.setModel(listModel);
				lstItems.validate();
			} else if (quantity <= 0){
				JOptionPane.showMessageDialog(this, "The item is not in stock", 
						"Error", JOptionPane.ERROR_MESSAGE);
			}
		} else {
			if(!isRepeated){
				listModel.addElement(item);
				lstItems.setModel(listModel);
				lstItems.validate();
			}
		}

	}

	/**
	 * Enables the remove button
	 * @param i - the value from a row selection (-1 if no row is selected)
	 */
	public void enableRemove(int i){
		if(i<0){
			btnRemove.setEnabled(false);
		} else {
			btnRemove.setEnabled(true);
		}
	}

	/**
	 * Removes a selected Item from the list
	 */
	public void removeItemFromList(){
		DefaultListModel listModel = (DefaultListModel)lstItems.getModel();
		if(lstItems.getSelectedIndex()!= -1){
			listModel.remove(lstItems.getSelectedIndex());
			lstItems.validate();
		}
	}

	/**
	 * Adds the items from the JList to an ArrayList
	 */
	public void addListItemsToArrayList(){
		itemsToProcess = new ArrayList();
		for(int i=0; i<lstItems.getModel().getSize();i++){
			Item item = (Item)lstItems.getModel().getElementAt(i);
			itemsToProcess.add(item);
		}

		itemsToProcess.trimToSize();
	}

	/**
	 * Loads the next step of the Transaction process
	 */
	public void proceedToProcessing(){
		if(lstItems.getModel().getSize() == 0){
			JOptionPane.showMessageDialog(this, "You must add items to the list", "Error", JOptionPane.ERROR_MESSAGE);
		} else {
			addListItemsToArrayList();
			if(transactionType == ApplicationConstants.ITEM_ENTRY){
				ItemEntry entry = new ItemEntry(user, itemsToProcess);
				entry.setSize(800, 500);
				MainScreen.contentPane.remove(this);
				MainScreen.contentPane.add(entry, BorderLayout.CENTER);
				MainScreen.contentPane.validate();
			} else {
				ItemExit exit = new ItemExit(user, itemsToProcess);
				exit.setSize(800, 500);
				MainScreen.contentPane.remove(this);
				MainScreen.contentPane.add(exit, BorderLayout.CENTER);
				MainScreen.contentPane.validate();
			}
		}
	}

	/**
	 * Sets the width of the columns in the table
	 */
	public void setTableColumnsWidth(){
		//Set Column "Code" width
		TableColumn colCode = tblSearchResults.getColumnModel().getColumn(0);
		colCode.setPreferredWidth(60);

		//Set Column "Name" width
		TableColumn colName = tblSearchResults.getColumnModel().getColumn(1);
		colName.setPreferredWidth(230);

		//Set Column "UM" width
		TableColumn colUM = tblSearchResults.getColumnModel().getColumn(2);
		colUM.setPreferredWidth(67);

		//Set Column "In Stock" width
		TableColumn colInStock = tblSearchResults.getColumnModel().getColumn(3);
		colInStock.setPreferredWidth(55);

		//Set Column "Group" width
		TableColumn colGroup = tblSearchResults.getColumnModel().getColumn(4);
		colGroup.setPreferredWidth(100);

		//Set Column "Location" width
		TableColumn colLocation = tblSearchResults.getColumnModel().getColumn(5);
		colLocation.setPreferredWidth(77);
	}

}
