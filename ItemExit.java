import javax.swing.*;
import java.util.*;
import java.awt.event.*;
import javax.swing.table.*;

/**
 * ---------------------------------------------------------------------
 * Warehouse Application
 * The Item Exit screen to process item withdrawal transactions
 * @author Alvaro Morales
 * @date 13/07/2010
 * @school Markham College
 * @IDE Eclipse SDK
 * @computer IBM ThinkPad R52
 * ---------------------------------------------------------------------
 */
public class ItemExit extends javax.swing.JPanel {

	/**
	 * Start of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	/**
	 * GUI components generated by Jigloo
	 */

	private JLabel lblItemExit;
	private JTable tblQuantities;
	private JLabel lblQuantitiesInfo;
	private JLabel lblQuantities;
	private JScrollPane scpQuantities;
	private JButton btnNext;
	private JSeparator spExitList;
	private JTextField txtRequestedBy;
	private JLabel lblRequestedBy;
	private JTextField txtDate;
	private JLabel lblDate;
	private JTextField txtDispatchedBy;
	private JLabel lblDispatchedBy;
	private JTextField txtVoucher;
	private JLabel lblRequiredFields;
	private JLabel lblItemExitVoucher;

	/**
	 * An ArrayList of items to process
	 */
	private ArrayList itemsToProcess;

	/**
	 * The user that logged in
	 */
	private User user;

	/**
	 * The current date
	 */
	private GregorianCalendar date;


	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Constructs a new ItemExit object
	 * @param user - the user that logged in
	 * @param itemsToProcess - an ArrayList of items to withdraw from the warehouse
	 */
	public ItemExit(User user, ArrayList itemsToProcess) {
		super();
		this.user = user;
		date = new GregorianCalendar();
		this.itemsToProcess = itemsToProcess;
		initGUI();
	}

	/**
	 * Method generated by Jigloo to initialize GUI components
	 */
	private void initGUI() {
		try {
			this.setPreferredSize(new java.awt.Dimension(800, 500));
			this.setLayout(null);
			{
				lblItemExit = new JLabel();
				this.add(lblItemExit);
				lblItemExit.setText("4. Item Exit");
				lblItemExit.setFont(new java.awt.Font("Dialog",1,14));
				lblItemExit.setBounds(12, 12, 83, 16);
			}
			{
				lblItemExitVoucher = new JLabel();
				this.add(lblItemExitVoucher);
				lblItemExitVoucher.setText("Item Exit Voucher No.* :");
				lblItemExitVoucher.setBounds(36, 58, 132, 16);
			}
			{
				lblRequiredFields = new JLabel();
				this.add(lblRequiredFields);
				lblRequiredFields.setText("Fields marked with an * are required");
				lblRequiredFields.setFont(new java.awt.Font("Dialog",0,10));
				lblRequiredFields.setBounds(12, 28, 205, 16);
			}
			{
				txtVoucher = new JTextField();
				this.add(txtVoucher);
				txtVoucher.setBounds(180, 54, 188, 20);
				txtVoucher.setSize(206, 24);
				txtVoucher.setDocument(new TextFieldDigitLimit(8));
				txtVoucher.setMinimumSize(new java.awt.Dimension(4, 24));
			}
			{
				lblDispatchedBy = new JLabel();
				this.add(lblDispatchedBy);
				lblDispatchedBy.setText("Dispatched By:");
				lblDispatchedBy.setBounds(445, 56, 84, 16);
			}
			{
				txtDispatchedBy = new JTextField();
				this.add(txtDispatchedBy);
				txtDispatchedBy.setBounds(541, 52, 206, 24);
				txtDispatchedBy.setText(user.getUsername());
				txtDispatchedBy.setEditable(false);
			}
			{
				lblDate = new JLabel();
				this.add(lblDate);
				lblDate.setText("Date:");
				lblDate.setBounds(500, 94, 29, 16);
			}
			{
				txtDate = new JTextField();
				this.add(txtDate);
				txtDate.setBounds(541, 90, 206, 24);
				txtDate.setEditable(false);
				int day = date.get(Calendar.DAY_OF_MONTH);
				int month = date.get(Calendar.MONTH);
				int year = date.get(Calendar.YEAR);
				txtDate.setText(day + "/" + month + "/" + year);
			}
			{
				lblRequestedBy = new JLabel();
				this.add(lblRequestedBy);
				lblRequestedBy.setText("Requested By* :");
				lblRequestedBy.setBounds(79, 94, 89, 16);
			}
			{
				txtRequestedBy = new JTextField();
				this.add(txtRequestedBy);
				txtRequestedBy.setBounds(180, 90, 206, 24);
			}
			{
				spExitList = new JSeparator();
				this.add(spExitList);
				spExitList.setBounds(12, 127, 776, 10);
			}
			{
				scpQuantities = new JScrollPane();
				this.add(scpQuantities);
				scpQuantities.setBounds(36, 188, 711, 256);
				scpQuantities.setSize(725, 256);
				{
					TransactionProcessingTableModel tblQuantitiesModel = 
						new TransactionProcessingTableModel(itemsToProcess);
					tblQuantities = new JTable();
					scpQuantities.setViewportView(tblQuantities);
					tblQuantities.setModel(tblQuantitiesModel);
					tblQuantities.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
					tblQuantities.addMouseListener(new MouseAdapter() {
						public void mouseClicked(MouseEvent e) {
							if (e.getClickCount() == 2) {
								JTable tblResults = (JTable)e.getSource();
								int row = tblResults.getSelectedRow();
								TransactionProcessingTableModel model = 
									(TransactionProcessingTableModel) tblQuantities.getModel();
								Item item = (Item) model.getSearchResults().get(row);
								ItemDescription description = new ItemDescription(item);
								description.setVisible(true);
							}
						}
					});

					//Set Column "Item ID" width
					int vColIndex = 0;
					TableColumn colID = tblQuantities.getColumnModel().getColumn(vColIndex);
					int width = 100;
					colID.setPreferredWidth(width);

					//Set Column "Item Name" width
					TableColumn colName = tblQuantities.getColumnModel().getColumn(1);
					colName.setPreferredWidth(308);

					//Set Column "UM" width
					TableColumn colUM = tblQuantities.getColumnModel().getColumn(2);
					colUM.setPreferredWidth(50);

					//Set Column "In Stock" width
					TableColumn colStock = tblQuantities.getColumnModel().getColumn(3);
					colStock.setPreferredWidth(100);

					//Set Column "Quantity to be removed" width
					TableColumn colQuantity = tblQuantities.getColumnModel().getColumn(4);
					colQuantity.setPreferredWidth(150);

				}
			}
			{
				btnNext = new JButton();
				this.add(btnNext);
				btnNext.setText("Next Step");
				btnNext.setBounds(672, 456, 89, 26);
				btnNext.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						performTransactionProcessing();
					}
				});
			}
			{
				lblQuantities = new JLabel();
				this.add(lblQuantities);
				lblQuantities.setText("5. Quantities");
				lblQuantities.setFont(new java.awt.Font("Dialog",1,14));
				lblQuantities.setBounds(12, 143, 96, 16);
			}
			{
				lblQuantitiesInfo = new JLabel();
				this.add(lblQuantitiesInfo);
				lblQuantitiesInfo.setText("Fill the 'Quantity' column for each item to be removed. Make sure " +
				"that this amount is not larger than the current stock or less than or equal to 0");
				lblQuantitiesInfo.setFont(new java.awt.Font("Dialog",0,10));
				lblQuantitiesInfo.setBounds(12, 160, 749, 16);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * End of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */
	public void performTransactionProcessing(){
		if(isCompleteInput() && isCorrectQuantity()){
			processAllTransactions();
			JOptionPane.showMessageDialog(this, "Transactions successfully processed", 
					"Success", JOptionPane.INFORMATION_MESSAGE);
			ChangeScreen.setOptimalRouteScreen(user, itemsToProcess);
		} else if(!isCorrectQuantity() && !isCompleteInput()){
			JOptionPane.showMessageDialog(this, "Some fields are missing and the \n" +
					"quantity entered is incorrect", "Error", JOptionPane.ERROR_MESSAGE);
		} else if(!isCompleteInput()){
			JOptionPane.showMessageDialog(this, "Some fields are missing", "Error", JOptionPane.ERROR_MESSAGE);
		} else if(!isCorrectQuantity()){
			JOptionPane.showMessageDialog(this, "One or more quantities entered are incorrect", 
					"Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * Processes all the transactions
	 */
	public void processAllTransactions(){
		TransactionProcessingTableModel model = (TransactionProcessingTableModel)tblQuantities.getModel();
		TransactionRecord[] transactionsToProcess = new TransactionRecord[model.getRowCount()];

		for(int i=0;i<transactionsToProcess.length;i++){
			transactionsToProcess[i] = new TransactionRecord();
			transactionsToProcess[i].setType(ApplicationConstants.ITEM_EXIT);	//deals with item withdrawals
			transactionsToProcess[i].setDocument(txtVoucher.getText());
			transactionsToProcess[i].setDate(this.date);
			transactionsToProcess[i].setWarehouseWorker(txtDispatchedBy.getText());
			transactionsToProcess[i].setThirdParty(txtRequestedBy.getText());
			transactionsToProcess[i].setQuantity(((Integer)model.getValueAt(i, 4)).intValue());
			transactionsToProcess[i].setItem((Item)model.getSearchResults().get(i));
			transactionsToProcess[i].processTransaction();
		}

	}

	/**
	 * Checks if the quantity entered is not greater than the quantity available
	 * @return true if the quantity is correct, else false
	 */
	public boolean isCorrectQuantity(){
		TransactionProcessingTableModel model = (TransactionProcessingTableModel)tblQuantities.getModel();
		for(int i=0;i<model.getRowCount();i++){
			TransactionRecord record = model.getTransactions()[i];
			Item item = (Item)model.getSearchResults().get(i);
			if(record.getQuantity() > Transactions.getQuantityInStock(item) || record.getQuantity() <= 0){
				return false;
			}
		}

		return true;

	}

	/**
	 * Checks if all the necessary fields have been filled in
	 * @return true if all necessary fields have been filled in, else false
	 */
	public boolean isCompleteInput(){
		if(txtVoucher.getText().equals("") || txtRequestedBy.getText().equals("")){
			return false;
		} else {
			return true;
		}
	}

}
