import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;

/**
 * ---------------------------------------------------------------------
 * Warehouse Application
 * The Item Search screen to search for an item
 * @author Alvaro Morales
 * @date 28/06/2010
 * @school Markham College
 * @IDE Eclipse SDK
 * @computer IBM ThinkPad R52
 * ---------------------------------------------------------------------
 */
public class ItemSearch extends javax.swing.JPanel {

	/**
	 * Start of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * GUI components generated by Jigloo
	 */

	private JLabel lblSearch;
	private JLabel lblSearchBy;
	private JComboBox cmbSearchCriteria;
	private JButton btnSearch;
	private JLabel lblName;
	private JLabel lblCode;
	private JComboBox cmbGroup;
	private JLabel lblGroup;
	private JLabel lblCodeSearchInfo;
	private JTextField txtSearchByName;
	private JRadioButton rbtnPartialMatch;
	private JRadioButton rbtnExactMatch;
	private ButtonGroup btnGroupSearchType;
	private JLabel lblColumn;
	private JLabel lblRow;
	private JLabel lblAisle;
	private JComboBox cmbColumn;
	private JComboBox cmbRow;
	private JComboBox cmbAisle;
	private JLabel lblLocation;
	private JTable tblSearchResults;
	private JScrollPane scpResultsTableHolder;
	private JLabel lblSearchHelp;
	private JLabel lblSearchResults;
	private JSeparator spSearchFields;
	private JTextField txtSearchByCode;

	/**
	 * The user that logged in
	 */
	private User user;

	/**
	 * Constructs a new ItemSearch object
	 * @param user - the user that logged in
	 */
	public ItemSearch(User user) {
		super();
		this.user = user;
		initGUI();
	}

	/**
	 * Method generated by Jigloo to initialize GUI components
	 */
	private void initGUI() {
		try {
			setPreferredSize(new Dimension(400, 300));
			this.setSize(800, 500);
			this.setLayout(null);
			{
				lblSearch = new JLabel();
				this.add(lblSearch);
				lblSearch.setText("Item Enquiry");
				lblSearch.setBounds(12, 12, 164, 21);
				lblSearch.setFont(new java.awt.Font("Dialog",1,14));
			}

			{
				ComboBoxModel cmbSearchCriteriaModel = 
					new DefaultComboBoxModel(
							new String[] { "Code", "Name", "Group", "Location" });
				cmbSearchCriteria = new JComboBox();
				this.add(cmbSearchCriteria);
				cmbSearchCriteria.setModel(cmbSearchCriteriaModel);
				cmbSearchCriteria.setBounds(119, 44, 117, 25);
				cmbSearchCriteria.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						changeSearchCriteria();
					}
				});
			}
			{
				txtSearchByCode = new JTextField();
				this.add(txtSearchByCode);
				txtSearchByCode.setBounds(119, 81, 266, 20);
				txtSearchByCode.setSize(266, 24);
				txtSearchByCode.setDocument(new TextFieldDigitLimit(6));
				txtSearchByCode.setVisible(true);
			}
			{
				lblSearchBy = new JLabel();
				this.add(lblSearchBy);
				lblSearchBy.setText("Search By:");
				lblSearchBy.setBounds(46, 48, 61, 16);
			}
			{
				spSearchFields = new JSeparator();
				this.add(spSearchFields);
				spSearchFields.setBounds(7, 174, 776, 10);
			}
			{
				btnSearch = new JButton();
				this.add(btnSearch);
				btnSearch.setText("Search");
				btnSearch.setBounds(119, 130, 102, 26);
				btnSearch.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						performSearch();
					}
				});
			}
			{
				lblSearchResults = new JLabel();
				this.add(lblSearchResults);
				lblSearchResults.setText("Search Results");
				lblSearchResults.setFont(new java.awt.Font("Dialog",1,14));
				lblSearchResults.setBounds(12, 190, 119, 16);
			}
			{
				lblSearchHelp = new JLabel();
				this.add(lblSearchHelp);
				lblSearchHelp.setText("Double click on an item to view its information");
				lblSearchHelp.setFont(new java.awt.Font("Dialog",0,10));
				lblSearchHelp.setBounds(12, 212, 259, 16);
			}
			{
				scpResultsTableHolder = new JScrollPane();
				this.add(scpResultsTableHolder);
				scpResultsTableHolder.setBounds(46, 240, 712, 215);
				{
					TableModel tblSearchResultsModel = new SearchResultsTableModel(null);
					tblSearchResults = new JTable();
					scpResultsTableHolder.setViewportView(tblSearchResults);
					tblSearchResults.setModel(tblSearchResultsModel);
					tblSearchResults.setColumnSelectionAllowed(false);
					tblSearchResults.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
					tblSearchResults.addMouseListener(new MouseAdapter() {
						public void mouseClicked(MouseEvent e) {
							if (e.getClickCount() == 2) {
								JTable tblResults = (JTable)e.getSource();
								int row = tblResults.getSelectedRow();
								SearchResultsTableModel model = 
									(SearchResultsTableModel) tblSearchResults.getModel();
								Item item = (Item) model.getSearchResults().get(row);
								ItemDescription description = new ItemDescription(item, user);
								description.setVisible(true);

							}
						}
					});
					{
						lblLocation = new JLabel();
						this.add(lblLocation);
						lblLocation.setText("Location:");
						lblLocation.setBounds(54, 85, 54, 16);
						lblLocation.setVisible(false);
					}
					{
						ComboBoxModel cmbAisleModel = new DefaultComboBoxModel(MainScreen.locations.getAisles());
						cmbAisle = new JComboBox();
						this.add(cmbAisle);
						cmbAisle.setModel(cmbAisleModel);
						cmbAisle.setBounds(119, 80, 80, 26);
						cmbAisle.setVisible(false);
					}
					{
						ComboBoxModel cmbColumnModel = new DefaultComboBoxModel(MainScreen.locations.getRows());
						cmbRow = new JComboBox();
						this.add(cmbRow);
						cmbRow.setModel(cmbColumnModel);
						cmbRow.setBounds(210, 81, 80, 25);
						cmbRow.setVisible(false);
					}
					{
						ComboBoxModel cmbColumnModel = new DefaultComboBoxModel(MainScreen.locations.getColumns());
						cmbColumn = new JComboBox();
						this.add(cmbColumn);
						cmbColumn.setModel(cmbColumnModel);
						cmbColumn.setBounds(303, 81, 82, 25);
						cmbColumn.setVisible(false);
					}
					{
						lblAisle = new JLabel();
						this.add(lblAisle);
						lblAisle.setText("Aisle");
						lblAisle.setBounds(144, 105, 24, 16);
						lblAisle.setFont(new java.awt.Font("Dialog",0,10));
						lblAisle.setVisible(false);
					}
					{
						lblRow = new JLabel();
						this.add(lblRow);
						lblRow.setText("Row");
						lblRow.setBounds(244, 105, 25, 16);
						lblRow.setFont(new java.awt.Font("Dialog",0,10));
						lblRow.setVisible(false);
					}
					{
						lblColumn = new JLabel();
						this.add(lblColumn);
						lblColumn.setText("Column");
						lblColumn.setBounds(325, 105, 40, 16);
						lblColumn.setFont(new java.awt.Font("Dialog",0,10));
						lblColumn.setVisible(false);
					}
					{
						rbtnExactMatch = new JRadioButton();
						rbtnExactMatch.setText("Exact Match");
						rbtnExactMatch.setBounds(509, 81, 95, 24);
						rbtnExactMatch.setVisible(false);
					}
					{
						rbtnPartialMatch = new JRadioButton();
						rbtnPartialMatch.setText("Partial Match");
						rbtnPartialMatch.setBounds(394, 81, 100, 24);
						rbtnPartialMatch.setSelected(true);
						rbtnPartialMatch.setVisible(false);
					}
					{
						ButtonGroup btnGroupSearchType = new ButtonGroup();
						btnGroupSearchType.add(rbtnExactMatch);
						btnGroupSearchType.add(rbtnPartialMatch);
					}
					{
						txtSearchByName = new JTextField();
						this.add(txtSearchByName);
						txtSearchByName.setVisible(false);
						txtSearchByName.setBounds(119, 81, 266, 20);
						txtSearchByName.setSize(266, 24);
						txtSearchByName.setVisible(false);
					}
					{
						this.add(rbtnExactMatch);
						this.add(rbtnPartialMatch);
					}
					{
						lblCodeSearchInfo = new JLabel();
						this.add(lblCodeSearchInfo);
						lblCodeSearchInfo.setText("Only digits");
						lblCodeSearchInfo.setBounds(392, 88, 60, 13);
						lblCodeSearchInfo.setFont(new java.awt.Font("Dialog",0,10));
					}
					{
						lblGroup = new JLabel();
						this.add(lblGroup);
						lblGroup.setText("Group:");
						lblGroup.setBounds(70, 85, 37, 16);
						lblGroup.setVisible(false);
					}
					{
						ComboBoxModel cmbGroupModel = new DefaultComboBoxModel(MainScreen.groups);
						cmbGroup = new JComboBox();
						this.add(cmbGroup);
						cmbGroup.setModel(cmbGroupModel);
						cmbGroup.setBounds(119, 81, 172, 25);
						cmbGroup.setVisible(false);
					}
					{
						lblCode = new JLabel();
						this.add(lblCode);
						lblCode.setText("Code:");
						lblCode.setBounds(75, 85, 32, 16);
					}
					{
						lblName = new JLabel();
						this.add(lblName);
						lblName.setText("Name:");
						lblName.setBounds(71, 85, 36, 16);
						lblName.setVisible(false);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}



	/**
	 * End of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	/**
	 * Updates GUI elements to match the search criteria and type
	 */
	public void changeSearchCriteria(){
		String searchCriteria = (String)cmbSearchCriteria.getSelectedItem();

		if (searchCriteria.equals("Code")) {
			//Enable and display GUI elements for a search by code
			lblCode.setVisible(true);
			txtSearchByCode.setVisible(true);
			txtSearchByCode.setDocument(new TextFieldDigitLimit(6));
			lblCodeSearchInfo.setVisible(true);

			//Disable and make invisible GUI elements for other types of searches
			lblName.setVisible(false);
			txtSearchByName.setVisible(false);
			rbtnPartialMatch.setVisible(false);
			rbtnExactMatch.setVisible(false);

			lblGroup.setVisible(false);
			cmbGroup.setVisible(false);

			lblLocation.setVisible(false);
			lblAisle.setVisible(false);
			lblRow.setVisible(false);
			lblColumn.setVisible(false);
			cmbAisle.setVisible(false);
			cmbRow.setVisible(false);
			cmbColumn.setVisible(false);

			this.validate();
		} else if (searchCriteria.equals("Name")){
			//Enable and display GUI elements for a search by name
			lblName.setVisible(true);
			txtSearchByName.setVisible(true);
			txtSearchByName.setDocument(new TextFieldLimit(200));
			rbtnPartialMatch.setVisible(true);
			rbtnExactMatch.setVisible(true);

			//Disable and make invisible GUI elements for other types of searches
			lblCode.setVisible(false);
			txtSearchByCode.setVisible(false);
			lblCodeSearchInfo.setVisible(false);

			lblGroup.setVisible(false);
			cmbGroup.setVisible(false);

			lblLocation.setVisible(false);
			lblAisle.setVisible(false);
			lblRow.setVisible(false);
			lblColumn.setVisible(false);
			cmbAisle.setVisible(false);
			cmbRow.setVisible(false);
			cmbColumn.setVisible(false);

			this.validate();
		} else if (searchCriteria.equals("Group")){
			//Enable and display GUI elements for a search by group
			lblGroup.setVisible(true);
			cmbGroup.setVisible(true);

			//Disable and make invisible GUI elements for other types of searches
			lblCode.setVisible(false);
			txtSearchByCode.setVisible(false);
			lblCodeSearchInfo.setVisible(false);

			lblName.setVisible(false);
			txtSearchByName.setVisible(false);
			rbtnPartialMatch.setVisible(false);
			rbtnExactMatch.setVisible(false);

			lblLocation.setVisible(false);
			lblAisle.setVisible(false);
			lblRow.setVisible(false);
			lblColumn.setVisible(false);
			cmbAisle.setVisible(false);
			cmbRow.setVisible(false);
			cmbColumn.setVisible(false);

			this.validate();
		} else if(searchCriteria.equals("Location")){
			//Enable and display GUI elements for a search by location
			lblLocation.setVisible(true);
			lblAisle.setVisible(true);
			lblRow.setVisible(true);
			lblColumn.setVisible(true);
			cmbAisle.setVisible(true);
			cmbRow.setVisible(true);
			cmbColumn.setVisible(true);

			//Disable and make invisible GUI elements for other types of searches
			lblCode.setVisible(false);
			txtSearchByCode.setVisible(false);
			lblCodeSearchInfo.setVisible(false);

			lblName.setVisible(false);
			txtSearchByName.setVisible(false);
			rbtnPartialMatch.setVisible(false);
			rbtnExactMatch.setVisible(false);

			lblGroup.setVisible(false);
			cmbGroup.setVisible(false);

			this.validate();
		}
	}

	/**
	 * Performs a search by code on the Code Index Binary Tree.
	 * Updates the table to show the items matching.
	 * If there is no match, the user is alerted.
	 * @param codeToFind - the code of the item to find (the search query)
	 */
	public void performSearchByCode(String codeToFind){

		Item item = MainScreen.codeIndexTree.search(codeToFind);

		if(item == null){
			displayNoResultsMessage();
			txtSearchByCode.setText("");
		} else {
			ArrayList list = new ArrayList();
			list.add(item);
			list.trimToSize();
			tblSearchResults.setModel(new SearchResultsTableModel(list));
			tblSearchResults.validate();
		}

	}

	/**
	 * Performs a search by exact name on the Name Index Binary Tree.
	 * Updates the table to show the items matching.
	 * If there is no match, the user is alerted.
	 * @param exactName - the exact name of the item to find (the search query)
	 */
	public void performExactSearchByName(String exactName){
		Item item = MainScreen.nameIndexTree.search(exactName);

		if(item == null){
			displayNoResultsMessage();
			txtSearchByName.setText("");
		} else {
			ArrayList list = new ArrayList();
			list.add(item);
			list.trimToSize();
			tblSearchResults.setModel(new SearchResultsTableModel(list));
			tblSearchResults.validate();
		}
	}

	/**
	 * Performs a search by partial name on the Name Index Binary Tree.
	 * @param partialName - the partial match of the name of the item to find (the search query)
	 * Updates the table to show the items matching.
	 * If there is no match, the user is alerted.
	 */
	public void performPartialSearchByName(String partialName){
		ArrayList searchResults = MainScreen.nameIndexTree.partialSearch(partialName);

		if(searchResults == null){
			displayNoResultsMessage();
			txtSearchByName.setText("");
		} else {
			tblSearchResults.setModel(new SearchResultsTableModel(searchResults));
			tblSearchResults.validate();
		}
	}

	/**
	 * Alerts the user that no results matching the query have been found and clears the table
	 */
	public void displayNoResultsMessage(){
		JOptionPane.showMessageDialog(this, "No results", "Error", JOptionPane.ERROR_MESSAGE);
		tblSearchResults.setModel(new SearchResultsTableModel(null));
		tblSearchResults.validate();
	}

	/**
	 * Performs a search depending on the criteria selected
	 */
	public void performSearch(){
		if (txtSearchByCode.isVisible()) {
			if(!txtSearchByCode.getText().equals("")){
				if(txtSearchByCode.getText().length() != 6){
					JOptionPane.showMessageDialog(this, "You must enter a 6 digit code query", 
							"Error", JOptionPane.ERROR_MESSAGE);
				} else {
					performSearchByCode(txtSearchByCode.getText());
				}
			} else {
				JOptionPane.showMessageDialog(this, "You must enter a search query", 
						"Error", JOptionPane.ERROR_MESSAGE);
			}
		} else if (txtSearchByName.isVisible()){
			if(!txtSearchByName.getText().equals("")){
				if(rbtnExactMatch.isSelected()){
					performExactSearchByName(txtSearchByName.getText());
				} else {
					performPartialSearchByName(txtSearchByName.getText());
				}
			} else {
				JOptionPane.showMessageDialog(this, "You must enter a search query", 
						"Error", JOptionPane.ERROR_MESSAGE);
			}
		} else if (cmbGroup.isVisible()){
			Group group = (Group)cmbGroup.getSelectedItem();
			performSearchByGroup(group.getCode());
		} else if (cmbAisle.isVisible()){
			performSearchByLocation();
		}
	}

	/**
	 * Opens an the description of a selected item (row in a table)
	 * @param row - the selected row index
	 */
	public void openItemDescription(int row){
		SearchResultsTableModel model = (SearchResultsTableModel)tblSearchResults.getModel();
		Item item = (Item)model.getSearchResults().get(row);
		ItemDescription description = new ItemDescription(item, user);
		description.setVisible(true);
	}

	/**
	 * Performs a search by group, updating the table with the search results
	 * @param groupCode - the code of the group (search query)
	 */
	public void performSearchByGroup(short groupCode){
		ArrayList searchResults = Items.searchByGroup(groupCode);
		if(searchResults != null && !searchResults.isEmpty()){
			tblSearchResults.setModel(new SearchResultsTableModel(searchResults));
			tblSearchResults.validate();
		} else {
			displayNoResultsMessage();
		}
	}


	/**
	 * Performs a search by group, updating the table with the search results
	 * @param groupCode - the code of the group (search query)
	 */
	public void performSearchByLocation(){
		byte warehouse = 1;
		byte aisle = ((Integer)cmbAisle.getSelectedItem()).byteValue();
		char row = ((String)cmbRow.getSelectedItem()).charAt(0);
		byte column = ((Integer)cmbColumn.getSelectedItem()).byteValue();

		Location location = new Location(warehouse, aisle, column, row);
		ArrayList searchResults = Items.searchByLocation(location);
		if(searchResults != null && !searchResults.isEmpty()){
			tblSearchResults.setModel(new SearchResultsTableModel(searchResults));
			tblSearchResults.validate();
		} else {
			displayNoResultsMessage();
		}
	}

}
