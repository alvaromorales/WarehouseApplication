import javax.swing.*;
import javax.swing.table.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

/**
 * ---------------------------------------------------------------------
 * Warehouse Application
 * The Optimal Route screen that shows an appropriate route for item pickup for withdrawal from the warehouse
 * @author Alvaro Morales
 * @date 14/07/2010
 * @school Markham College
 * @IDE Eclipse SDK
 * @computer IBM ThinkPad R52
 * @mastery achieves HL mastery factor 16 with the use of the java.util external library
 * ---------------------------------------------------------------------
 */
public class OptimalRoute extends javax.swing.JPanel {
	
	/**
	 * Start of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */
	
	/**
	 * GUI components generated by Jigloo
	 */
	private JLabel lblOptimalRoute;
	private JScrollPane scpOptimalRoute;
	private JButton btnFinish;
	private JTable tblOptimalRoute;
	private JLabel lblOptimalRouteInfo;
	
	/**
	 * An ArrayList of items to calculate the optimal pickup route
	 */
	private ArrayList itemsToWithdraw;
	
	/**
	 * The user that logged in
	 */
	private User user;
	
	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Constructs a new OptimalRoute object
	 * @param itemsToWithdraw - an ArrayList of items to withdraw from the warehouse
	 * @param user - the user that logged in
	 */
	public OptimalRoute(ArrayList itemsToWithdraw, User user) {
		super();
		this.itemsToWithdraw = itemsToWithdraw;
		this.user = user;
		initGUI();
	}
	
	/**
	 * Method generated by Jigloo to initialize GUI components
	 */
	private void initGUI() {
		try {
			this.setLayout(null);
			this.setPreferredSize(new java.awt.Dimension(800, 500));
			{
				lblOptimalRoute = new JLabel();
				this.add(lblOptimalRoute);
				lblOptimalRoute.setText("6. Optimal Route");
				lblOptimalRoute.setFont(new java.awt.Font("Dialog",1,14));
				lblOptimalRoute.setBounds(12, 12, 125, 16);
			}
			{
				lblOptimalRouteInfo = new JLabel();
				this.add(lblOptimalRouteInfo);
				lblOptimalRouteInfo.setText("The column 'Order' denotes the pickup route");
				lblOptimalRouteInfo.setFont(new java.awt.Font("Dialog",0,10));
				lblOptimalRouteInfo.setBounds(12, 34, 252, 16);
			}
			{
				scpOptimalRoute = new JScrollPane();
				this.add(scpOptimalRoute);
				scpOptimalRoute.setBounds(51, 70, 698, 359);
				{
					RouteTableModel tblOptimalRouteModel = new RouteTableModel(getOptimalRoute(itemsToWithdraw));
					tblOptimalRoute = new JTable();
					scpOptimalRoute.setViewportView(tblOptimalRoute);
					tblOptimalRoute.setModel(tblOptimalRouteModel);
				}
				
				tblOptimalRoute.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
				
				//Set Column "Order" width
				int vColIndex = 0;
				TableColumn order = tblOptimalRoute.getColumnModel().getColumn(vColIndex);
				int width = 70;
				order.setPreferredWidth(width);
				
				//Set Column "Code" width
				TableColumn colID = tblOptimalRoute.getColumnModel().getColumn(1);
				colID.setPreferredWidth(100);
				
				//Set column "Name" width
				TableColumn colName = tblOptimalRoute.getColumnModel().getColumn(2);
				colName.setPreferredWidth(345);
				
				//Set Column "UM" width
				TableColumn colUM = tblOptimalRoute.getColumnModel().getColumn(3);
				colUM.setPreferredWidth(100);
				
				//Set Column "Location" width
				TableColumn colLocation = tblOptimalRoute.getColumnModel().getColumn(4);
				colLocation.setPreferredWidth(80);
			}
			{
				btnFinish = new JButton();
				this.add(btnFinish);
				btnFinish.setText("Finish");
				btnFinish.setBounds(670, 455, 79, 26);
				btnFinish.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						ChangeScreen.setBlankScreen(user);
					}
				});
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * End of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */
	
	/**
	 * Gets an optimal pickup route for a set of Items based on their location in the warehouse
	 * @param itemsToProcess - an ArrayList of items being withdrawed
	 * @return an ArrayList of an efficient item pickup route
	 */
	public ArrayList getOptimalRoute(ArrayList itemsToProcess){
		if(itemsToProcess.size() == 1){
			return itemsToProcess;
		} else {
			ArrayList group1 = new ArrayList();
			ArrayList group2 = new ArrayList();
			
			for(int i=0;i<itemsToProcess.size();i++){
				Item currentItem = (Item)itemsToWithdraw.get(i);
				
				if(currentItem.getLocation().getAisle() <= 36){
					group1.add(currentItem);
				} else {
					group2.add(currentItem);
				}
			}
			
			group1.trimToSize();
			Collections.sort(group1, Item.LOCATION_ORDER);
			
			group2.trimToSize();
			Collections.sort(group2, Item.LOCATION_ORDER);
			
			ArrayList route = new ArrayList();
			
			for(int i=0;i<group1.size();i++){
				route.add((Item)group1.get(i));
			}
			
			for(int i=0;i<group2.size();i++){
				route.add((Item)group2.get(i));
			}
			
			route.trimToSize();
			return route;
		}
	}

}
