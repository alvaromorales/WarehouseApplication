import javax.swing.border.BevelBorder;
import java.nio.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import java.io.*;
import javax.imageio.*;
import java.awt.*;
import java.nio.channels.*;

/**
 * ---------------------------------------------------------------------
 * Warehouse Application
 * The Create New Item screen to create a new item
 * @author Alvaro Morales
 * @date 02/07/2010
 * @school Markham College
 * @IDE Eclipse SDK
 * @computer IBM ThinkPad R52
 * ---------------------------------------------------------------------
 */
public class CreateNewItem extends javax.swing.JPanel {

	/**
	 * Start of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * GUI components generated by Jigloo
	 */

	private JLabel lblCreateNewItem;
	private JLabel lblRequiredFields;
	private JLabel lblDescription;
	private JButton btnBrowse;
	private JButton btnCreate;
	private JLabel lblRow;
	private JLabel lblColumn;
	private JLabel lblAisle;
	private JLabel lblLocation;
	private JTextField txtDate;
	private JLabel lblDate;
	private JTextField txtCreatedBy;
	private JLabel lblCreatedBy;
	private JLabel lblImage;
	private JLabel lblItemImage;
	private JTextArea txtDescription;
	private JTextArea txtName;
	private JLabel lblCodeInfo;
	private JLabel lblCode;
	private JTextField txtCode;
	private JButton btnClearImage;
	private JLabel lblImageInfo;
	private JComboBox cmbRow;
	private JComboBox cmbColumn;
	private JComboBox cmbAisle;
	private JLabel lblDescriptionInfo2;
	private JLabel lblDescriptionInfo;
	private JLabel lblNameInfo2;
	private JLabel lblNameInfo;
	private JComboBox cmbUM;
	private JComboBox cmbGroup;
	private JLabel lblUM;
	private JLabel lblFamily;
	private JLabel lblName;

	/**
	 * The user that logged in
	 */
	private User user;

	/**
	 * The current date
	 */
	private GregorianCalendar currentDate;

	/**
	 * The item's image
	 */
	private File imageFile;

	/**
	 * Creates a new CreateNewItem object
	 * @param user - the user that logged in
	 */
	public CreateNewItem(User user) {
		super();
		this.user = user;
		initGUI();
	}

	/**
	 * Methods generated by Jigloo to initialize GUI components
	 */
	private void initGUI() {
		try {
			this.setLayout(null);
			this.setPreferredSize(new java.awt.Dimension(800, 500));
			this.setSize(800, 500);
			{
				lblCreateNewItem = new JLabel();
				this.add(lblCreateNewItem);
				lblCreateNewItem.setText("Create a New Item");
				lblCreateNewItem.setFont(new java.awt.Font("Dialog",1,14));
				lblCreateNewItem.setBounds(12, 12, 148, 14);
			}
			{
				lblRequiredFields = new JLabel();
				this.add(lblRequiredFields);
				lblRequiredFields.setText("Fields marked with an * are required");
				lblRequiredFields.setBounds(12, 29, 210, 16);
				lblRequiredFields.setFont(new java.awt.Font("Dialog",0,10));
			}
			{
				lblName = new JLabel();
				this.add(lblName);
				lblName.setText("Name* :");
				lblName.setBounds(65, 94, 44, 16);
			}
			{
				lblFamily = new JLabel();
				this.add(lblFamily);
				lblFamily.setText("Group* :");
				lblFamily.setBounds(62, 198, 46, 13);
			}
			{
				lblUM = new JLabel();
				this.add(lblUM);
				lblUM.setText("U.M.* :");
				lblUM.setBounds(74, 238, 35, 10);
			}
			{
				lblDescription = new JLabel();
				this.add(lblDescription);
				lblDescription.setText("Description:");
				lblDescription.setBounds(41, 269, 68, 18);
			}
			{
				btnBrowse = new JButton();
				this.add(btnBrowse);
				btnBrowse.setText("Browse...");
				btnBrowse.setBounds(533, 287, 89, 26);
				btnBrowse.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						getAndDisplayImage();
					}
				});
			}
			{
				ComboBoxModel cmbFamilyModel = 
					new DefaultComboBoxModel(MainScreen.groups);
				cmbGroup = new JComboBox();
				this.add(cmbGroup);
				cmbGroup.setModel(cmbFamilyModel);
				cmbGroup.setBounds(121, 193, 191, 22);
				cmbGroup.setSize(191, 25);
			}
			{
				ComboBoxModel cmbUMModel = 
					new DefaultComboBoxModel(MainScreen.umArray);
				cmbUM = new JComboBox();
				this.add(cmbUM);
				cmbUM.setModel(cmbUMModel);
				cmbUM.setBounds(121, 232, 193, 25);
			}
			{
				txtDescription = new JTextArea();
				this.add(txtDescription);
				txtDescription.setBounds(121, 270, 350, 85);
				txtDescription.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
				txtDescription.setLineWrap(true);
				txtDescription.setDocument(new TextFieldLimit(200));
			}
			{
				lblItemImage = new JLabel();
				this.add(lblItemImage);
				lblItemImage.setBounds(533, 85, 224, 168);
				lblItemImage.setBorder(BorderFactory.createEtchedBorder(BevelBorder.LOWERED));
			}
			{
				lblImage = new JLabel();
				this.add(lblImage);
				lblImage.setText("Image:");
				lblImage.setBounds(533, 68, 48, 16);
			}
			{
				lblCreatedBy = new JLabel();
				this.add(lblCreatedBy);
				lblCreatedBy.setText("Created By:");
				lblCreatedBy.setBounds(42, 374, 69, 15);
			}
			{
				txtCreatedBy = new JTextField();
				this.add(txtCreatedBy);
				txtCreatedBy.setBounds(121, 368, 139, 28);
				txtCreatedBy.setEditable(false);
				txtCreatedBy.setSize(139, 25);
			}
			{
				lblDate = new JLabel();
				this.add(lblDate);
				lblDate.setText("Date:");
				lblDate.setBounds(272, 374, 30, 14);
			}
			{
				txtDate = new JTextField();
				this.add(txtDate);
				txtDate.setBounds(313, 368, 158, 27);
				txtDate.setEditable(false);
				txtDate.setSize(158, 25);
			}
			{
				lblLocation = new JLabel();
				this.add(lblLocation);
				lblLocation.setText("Location");
				lblLocation.setBounds(45, 409, 64, 7);
				lblLocation.setFont(new java.awt.Font("Dialog",1,14));
				lblLocation.setSize(64, 16);
			}
			{
				lblAisle = new JLabel();
				this.add(lblAisle);
				lblAisle.setText("Aisle* :");
				lblAisle.setBounds(71, 437, 40, 4);
				lblAisle.setSize(40, 10);
			}

			{
				lblColumn = new JLabel();
				lblColumn.setText("Column* :");
				lblColumn.setBounds(334, 437, 55, 12);
				this.add(lblColumn);
			}

			{
				lblRow = new JLabel();
				lblRow.setText("Row* :");
				lblRow.setBounds(207, 436, 36, 10);
				this.add(lblRow);
			}
			{
				btnCreate = new JButton();
				btnCreate.setText("Create Item");
				btnCreate.setBounds(640, 441, 100, 26);
				btnCreate.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						if(isCorrectInput()){
							performItemCreation();
						} else {
							displayInputError();
						}
					}

				});
				this.add(btnCreate);
				this.add(getTxtName());
				this.add(getLblNameInfo());
				this.add(getLblNameInfo2());
				this.add(getLblDescriptionInfo());
				this.add(getLblDescriptionInfo2());
				this.add(getCmbAisle());
				this.add(getCmbColumn());
				this.add(getCmbRow());
				this.add(getLblImageInfo());
				this.add(getBtnClearImage());
				this.add(getTxtCode());
				this.add(getLblCode());
				this.add(getLblCodeInfo());

			}
			{
				fillDisabledFields();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private JTextArea getTxtName() {
		if(txtName == null) {
			txtName = new JTextArea();
			txtName.setBounds(121, 95, 350, 84);
			txtName.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
			txtName.setLineWrap(true);
			txtName.setDocument(new TextFieldLimit(200));
		}
		return txtName;
	}

	private JLabel getLblNameInfo() {
		if(lblNameInfo == null) {
			lblNameInfo = new JLabel();
			lblNameInfo.setText("No more than");
			lblNameInfo.setBounds(45, 107, 67, 16);
			lblNameInfo.setFont(new java.awt.Font("Dialog",0,10));
		}
		return lblNameInfo;
	}

	private JLabel getLblNameInfo2() {
		if(lblNameInfo2 == null) {
			lblNameInfo2 = new JLabel();
			lblNameInfo2.setText("200 characters");
			lblNameInfo2.setBounds(39, 122, 72, 15);
			lblNameInfo2.setFont(new java.awt.Font("Dialog",0,10));
		}
		return lblNameInfo2;
	}

	private JLabel getLblDescriptionInfo() {
		if(lblDescriptionInfo == null) {
			lblDescriptionInfo = new JLabel();
			lblDescriptionInfo.setText("No more than");
			lblDescriptionInfo.setBounds(45, 285, 76, 16);
			lblDescriptionInfo.setFont(new java.awt.Font("Dialog",0,10));
		}
		return lblDescriptionInfo;
	}

	private JLabel getLblDescriptionInfo2() {
		if(lblDescriptionInfo2 == null) {
			lblDescriptionInfo2 = new JLabel();
			lblDescriptionInfo2.setText("200 characters");
			lblDescriptionInfo2.setBounds(38, 301, 87, 15);
			lblDescriptionInfo2.setFont(new java.awt.Font("Dialog",0,10));
		}
		return lblDescriptionInfo2;
	}

	private JComboBox getCmbAisle() {
		if(cmbAisle == null) {
			ComboBoxModel cmbAisleModel = new DefaultComboBoxModel(MainScreen.locations.getAisles());
			cmbAisle = new JComboBox();
			cmbAisle.setModel(cmbAisleModel);
			cmbAisle.setBounds(122, 430, 67, 24);
			cmbAisle.setSize(67, 25);
		}
		return cmbAisle;
	}

	private JComboBox getCmbColumn() {
		if(cmbColumn == null) {
			ComboBoxModel cmbColumnModel = new DefaultComboBoxModel(MainScreen.locations.getColumns());
			cmbColumn = new JComboBox();
			cmbColumn.setModel(cmbColumnModel);
			cmbColumn.setBounds(400, 431, 67, 25);
		}
		return cmbColumn;
	}

	private JComboBox getCmbRow() {
		if(cmbRow == null) {
			ComboBoxModel cmbRowModel = new DefaultComboBoxModel(MainScreen.locations.getRows());
			cmbRow = new JComboBox();
			cmbRow.setModel(cmbRowModel);
			cmbRow.setBounds(255, 431, 67, 27);
			cmbRow.setSize(67, 25);
		}
		return cmbRow;
	}

	private JLabel getLblImageInfo() {
		if(lblImageInfo == null) {
			lblImageInfo = new JLabel();
			lblImageInfo.setText("Must be 320x240 pixels");
			lblImageInfo.setBounds(533, 259, 134, 16);
			lblImageInfo.setFont(new java.awt.Font("Dialog",0,10));
		}
		return lblImageInfo;
	}

	private JButton getBtnClearImage() {
		if(btnClearImage == null) {
			btnClearImage = new JButton();
			btnClearImage.setText("Clear Image");
			btnClearImage.setBounds(655, 287, 102, 26);
			btnClearImage.setEnabled(false);
			btnClearImage.addActionListener(new ActionListener() {
				public void actionPerformed (ActionEvent e){
					clearImage();
				}

			});

		}
		return btnClearImage;
	}

	private JTextField getTxtCode() {
		if(txtCode == null) {
			txtCode = new JTextField();
			txtCode.setBounds(121, 57, 191, 20);
			txtCode.setSize(191, 25);
			txtCode.setDocument(new TextFieldDigitLimit(6));
		}
		return txtCode;
	}

	private JLabel getLblCode() {
		if(lblCode == null) {
			lblCode = new JLabel();
			lblCode.setText("Code* :");
			lblCode.setBounds(69, 57, 40, 17);
		}
		return lblCode;
	}

	private JLabel getLblCodeInfo() {
		if(lblCodeInfo == null) {
			lblCodeInfo = new JLabel();
			lblCodeInfo.setText("Exactly 6 numbers");
			lblCodeInfo.setBounds(21, 71, 94, 16);
			lblCodeInfo.setFont(new java.awt.Font("Dialog",0,10));
		}
		return lblCodeInfo;
	}

	/**
	 * End of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	/**
	 * Fills the 'Created By' and 'Date' disabled fields when the screen renders
	 */
	public void fillDisabledFields(){
		txtCreatedBy.setText(user.getUsername());	//Fill 'Created By'

		//Create Date and output in DD/MM/YYYY format
		currentDate = new GregorianCalendar();
		int month = currentDate.get(Calendar.MONTH) + 1;
		String date = 
			currentDate.get(Calendar.DAY_OF_MONTH) + "/" + 
			month + "/" + 
			currentDate.get(Calendar.YEAR);
		txtDate.setText(date);
	}

	/**
	 * Informs the user that the input is invalid or incorrect
	 */
	public void displayInputError(){
		JOptionPane.showMessageDialog(this, "Some fields are missing", "Error", JOptionPane.ERROR_MESSAGE);
	}

	/**
	 * Informs the user that the item has been created
	 */
	public void displaySuccessMessage(){
		JOptionPane.showMessageDialog(this, "The item has been created.", 
				"Success", JOptionPane.INFORMATION_MESSAGE);
		ChangeScreen.setBlankScreen(user);
	}

	/**
	 * Gets an image from the File that the user selected and displays it in the Product Image box
	 */
	public void getAndDisplayImage(){
		//Get and Display a File Chooser
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setAcceptAllFileFilterUsed(false);
		fileChooser.setFileFilter(new JpgFilter());
		fileChooser.setDialogTitle("Choose an item image");
		int returnValue = fileChooser.showOpenDialog(this);

		if (returnValue == JFileChooser.APPROVE_OPTION){
			if(fileChooser.getSelectedFile() != null){
				File file = fileChooser.getSelectedFile();
				this.imageFile = file;
				try{
					Image image = ImageIO.read(file);
					lblItemImage.setIcon(new ImageIcon(image));
					btnClearImage.setEnabled(true);

				} catch (Exception e){

				}
			}
		}

	}

	/**
	 * Clears the Image from the product image box
	 */
	public void clearImage(){
		lblItemImage.setIcon(null);
		btnClearImage.setEnabled(false);
	}

	/**
	 * Validates the user input
	 * @return true if input is valid, else false
	 */
	public boolean isCorrectInput(){

		if(!txtName.getText().equals("") || !txtName.getText().equals(null) 
				&& txtCode.getText().length() == 6){
			return true;
		} else {
			return false;
		}

	}

	/**
	 * Creates a new Item from user input in the Create New Item screen
	 * @return a new Item from user input
	 */
	public Item createItemFromInput(){
		int ID = Integer.MAX_VALUE;		//Temporary value for ID; will be changed later
		String code = txtCode.getText();
		String name = txtName.getText();
		Group group = ((Group)cmbGroup.getSelectedItem());
		UM um = ((UM)cmbUM.getSelectedItem());
		String description = txtDescription.getText();
		String createdBy = txtCreatedBy.getText();
		int day = currentDate.get(Calendar.DAY_OF_MONTH);
		int month = currentDate.get(Calendar.MONTH);
		int year = currentDate.get(Calendar.YEAR);
		GregorianCalendar creationDate = new GregorianCalendar(year, month, day);
		Location location = new Location((
				(Integer)cmbAisle.getSelectedItem()).byteValue(), 
				((Integer)cmbColumn.getSelectedItem()).byteValue(), 
				((String)cmbRow.getSelectedItem()).charAt(0)
		);

		Item item = new Item(ID, code, name, group, um, description, location, createdBy, creationDate);

		return item;
	}

	/**
	 * Writes a new Item to the Items Random Access File
	 * @param item - the item to write to the file
	 * @mastery achieves HL mastery factor 1 by adding a new item to the Items Random Access File 
	 * by manipulating the file pointer using the seek method
	 */
	public void writeNewItem(Item item){

		try{
			RandomAccessFile itemsFile = new RandomAccessFile(ApplicationConstants.ITEMS_FILE, "rw");

			if(itemsFile.length() == 0){
				initItemsFile(itemsFile);
			}

			int emptyRecordPos = 0;		//Position of the first empty record
			boolean isFull = false;		//Marks if the end of the file has been reached

			itemsFile.seek(0);

			while(itemsFile.readInt()!= -999 && !isFull){
				emptyRecordPos = emptyRecordPos+1;
				if(emptyRecordPos >= (
						itemsFile.length() / ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH)){
					isFull = true;
				} else {
					itemsFile.seek(emptyRecordPos * ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);
				}
			}

			if(isFull){
				growItemsFile(itemsFile);
			}

			if(emptyRecordPos != 0){
				itemsFile.seek((emptyRecordPos-1) * ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);
				int prevID = itemsFile.readInt();
				itemsFile.seek(emptyRecordPos*ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);

				//Write the item
				item.setID(prevID + 1);
				item.writeItemToFile(itemsFile);
			} else {
				item.setID(0);
				itemsFile.seek(0);
				item.writeItemToFile(itemsFile);
			}

			if(imageFile!=null){
				File newImageFile = copyFile(imageFile, ApplicationConstants.ITEM_IMAGES_FOLDER);
				newImageFile.renameTo(new File(ApplicationConstants.ITEM_IMAGES_FOLDER + item.getID() + ".jpg"));
			}

			Index codeIndex = new Index(item.getID(), item.getCode());
			Index nameIndex = new Index(item.getID(), item.getName());

			writeIndex(codeIndex, 0);
			writeIndex(nameIndex, 1);

			MainScreen.codeIndexTree.insertIndex(new IndexTNode(codeIndex));
			MainScreen.nameIndexTree.insertIndex(new IndexTNode(nameIndex));

			//Create a Transactions file
			File file = new File(ApplicationConstants.TRANSACTIONS_FOLDER + item.getID() + ".txt");
			file.createNewFile();

			itemsFile.close();
		} catch (Exception e){
			e.printStackTrace();
		}

	}

	/**
	 * Initialize the Items Random Access File to 20 empty records.
	 * @param itemsFile - the Items Random Access File
	 */
	public void initItemsFile(RandomAccessFile itemsFile){
		int maxRecords = 10;

		String emptyNameDescription = "";
		while(emptyNameDescription.length()!= 200){
			emptyNameDescription = emptyNameDescription + "X";
		}

		String emptyCode = "";
		while(emptyCode.length()!= 6){
			emptyCode = emptyCode + "X";
		}

		String emptyCreatedBy = "";
		while(emptyCreatedBy.length()!= 20){
			emptyCreatedBy = emptyCreatedBy + "X";
		}

		try{
			for(int i=0;i<maxRecords;i++){
				itemsFile.seek(i * ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);
				writeEmptyRecord(itemsFile, emptyNameDescription, emptyCode, emptyCreatedBy);
			}
		} catch (Exception e){

		}
	}

	/**
	 * Writes a new empty record to the Items Random Access File.
	 * An ID "-999" denotes that the record is empty.
	 * @param itemsFile - the Items Random Access File
	 * @param emptyNameDescription - an empty String for the Name or Description, 200 characters long
	 * @param emptyCode - an empty String for the Code, 6 characters long
	 * @param emptyCreatedBy - an empty String for the createdBy field, 20 characters long
	 */
	public void writeEmptyRecord(RandomAccessFile itemsFile, String emptyNameDescription, 
			String emptyCode, String emptyCreatedBy){
		try{
			itemsFile.writeInt(-999);
			itemsFile.writeUTF(emptyCode);
			itemsFile.writeUTF(emptyNameDescription);
			itemsFile.writeShort(-1);
			itemsFile.writeShort(-1);
			itemsFile.writeUTF(emptyNameDescription);
			itemsFile.writeByte(-1);
			itemsFile.writeByte(-1);
			itemsFile.writeByte(-1);
			itemsFile.writeChar('X');
			itemsFile.writeUTF(emptyCreatedBy);
			itemsFile.writeShort(-1);
			itemsFile.writeByte(-1);
			itemsFile.writeByte(-1);
		} catch (Exception e){

		}
	}

	/**
	 * Grows the maximum number of records in the Items Random Access File by a factor of 1.5
	 * @param itemsFile - the maximum number of records in the Items Random Access File
	 */
	public void growItemsFile(RandomAccessFile itemsFile){
		try{
			long numberOfRecords = (itemsFile.length() / ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);
			long newNumberOfRecords = (long)(numberOfRecords * 1.5);
			itemsFile.setLength(newNumberOfRecords * ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);
			itemsFile.seek(numberOfRecords * ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);

			String emptyNameDescription = "";
			while(emptyNameDescription.length()!= 200){
				emptyNameDescription = emptyNameDescription + "X";
			}

			String emptyCode = "";
			while(emptyCode.length()!= 6){
				emptyCode = emptyCode + "X";
			}

			String emptyCreatedBy = "";
			while(emptyCreatedBy.length()!= 20){
				emptyCreatedBy = emptyCreatedBy + "X";
			}

			for(long i = numberOfRecords;i<newNumberOfRecords;i++){
				itemsFile.seek(i * ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);
				writeEmptyRecord(itemsFile, emptyNameDescription, emptyCode, emptyCreatedBy);
			}

		} catch (Exception e){

		}

	}

	/**
	 * Copies a file to a destination
	 * @author Vinod Singh, with modifications by Alvaro Morales
	 * @authorswebsite http://blog.vinodsingh.com/2009/06/copy-move-and-delete-files-using-java.html
	 * @date 12 June 2009
	 * @param file - the file to copy
	 * @param destination - the destination path of the file
	 * @return the file that has been copied
	 * @throws IOException if file accessing does not work
	 */
	public File copyFile(File file, String destination) throws IOException {  
		FileChannel in = null;  
		FileChannel out = null;  
		try {  
			in = new FileInputStream(file).getChannel();  
			File outFile = new File(destination, file.getName());  
			out = new FileOutputStream(outFile).getChannel();  
			in.transferTo(0, in.size(), out);  
			return outFile;
		} finally {  
			if (in != null)  
				in.close();  
			if (out != null)  
				out.close();  
		}  
		
	}  

	/**
	 * Creates an index by code or name of the item being created
	 * @param index - the Index by code object
	 * @param indexType - the type of Index:
	 * 0 if it is an index by code, 1 if it is an index by name.
	 */
	public void writeIndex(Index index, int indexType){
		if(indexType == 0){
			try{
				File file = new File(ApplicationConstants.CODE_INDEX_FILE);
				File tmpFile = new File(ApplicationConstants.TMP_CODE_INDEX_FILE);	//Creates the temporary file
				FileReader reader = new FileReader(file);
				BufferedReader buff = new BufferedReader(reader);
				FileWriter writer = new FileWriter(tmpFile);
				BufferedWriter buffwriter = new BufferedWriter(writer);

				boolean eof = false;		//stores if the end of the file (eof) has been reached

				while(!eof){
					String line = buff.readLine();
					if(line == null){
						eof = true;		//the end of the file has been reached
					} else {
						buffwriter.write(line);
						buffwriter.newLine();

					}
				}

				buffwriter.write(index.toString());

				reader.close();
				buff.close();
				buffwriter.close();
				writer.close();

				//Rename temporary file to old file
				file.delete();
				tmpFile.renameTo(file);

			} catch (Exception e){

			}
		} else {
			try{
				File file = new File(ApplicationConstants.NAME_INDEX_FILE);
				File tmpFile = new File(ApplicationConstants.TMP_NAME_INDEX_FILE);	//Creates the temporary file
				FileReader reader = new FileReader(file);
				BufferedReader buff = new BufferedReader(reader);
				FileWriter writer = new FileWriter(tmpFile);
				BufferedWriter buffwriter = new BufferedWriter(writer);

				boolean eof = false;		//stores if the end of the file (eof) has been reached

				while(!eof){
					String line = buff.readLine();
					if(line == null){
						eof = true;		//the end of the file has been reached
					} else {
						buffwriter.write(line);
						buffwriter.newLine();
					}
				}

				buffwriter.write(index.toString());

				reader.close();
				buff.close();
				buffwriter.close();
				writer.close();

				//Rename temporary file to old file
				file.delete();
				tmpFile.renameTo(file);
			} catch (Exception e){

			}
		}
	}

	/**
	 * Performs the item creation.
	 * Checks to see if the location set by the user is taken.
	 * If it is, it informs the user and asks to proceed with creation anyway
	 */
	public void performItemCreation(){
		Item newItem = createItemFromInput();
		ArrayList itemsInLocation = Items.searchByLocation(newItem.getLocation());

		if(itemsInLocation == null || itemsInLocation.isEmpty()){
			writeNewItem(newItem);
			displaySuccessMessage();
		} else {
			String items = "The following items are stored in the location " + newItem.getLocation().toString() 
			+ ": \n";
			for(int i=0;i<itemsInLocation.size();i++){
				Item item = (Item)itemsInLocation.get(i);
				String itemName = item.getName();
				if(itemName.length()>40){
					itemName = itemName.substring(0, 19) + "...";
				}
				items = items + "\n" + (i+1) + ". " + itemName;
			}

			items = items + "\n" + "\n" + "Assign this location to the new item anyway?";

			int userResponse = JOptionPane.showConfirmDialog(
					this, items, "Location Taken", 
					JOptionPane.YES_NO_OPTION);
			if(userResponse == JOptionPane.YES_OPTION){
				writeNewItem(newItem);
				displaySuccessMessage();
			}
		}
	}

}