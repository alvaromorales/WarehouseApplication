import javax.swing.*;
import java.io.*;
import java.util.*;
import java.awt.event.*;

/**
 * ---------------------------------------------------------------------
 * Warehouse Application
 * Constructs the Login Screen and handles user login
 * @author Alvaro Morales
 * @date 04/06/2010
 * @school Markham College
 * @IDE Eclipse SDK
 * @computer IBM ThinkPad R52
 * ---------------------------------------------------------------------
 */
public class LoginScreen extends javax.swing.JFrame {

	/**
	 * GUI components generated by Jigloo
	 */

	private JLabel lblWarehouse;
	private JSeparator spLogin;
	private JButton btnLogin;
	private JPasswordField txtPassword;
	private JTextField txtUsername;
	private JLabel lblPassword;
	private JLabel lblUsername;

	/**
	 * Start of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Auto-generated main method to display this JFrame
	 */
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				LoginScreen inst = new LoginScreen();
				inst.setLocationRelativeTo(null);
				inst.setVisible(true);
			}
		});
	}

	/**
	 * Constructs a new LoginScreen object
	 */
	public LoginScreen() {
		super();
		initGUI();
	}

	/**
	 * Method generated by Jigloo to initialize GUI components
	 */
	private void initGUI() {
		try {
			this.setFocusCycleRoot(false);
			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			this.setTitle("Warehouse Application");
			this.setIconImage(new ImageIcon(getClass().getClassLoader().getResource(
					ApplicationConstants.WAREHOUSE_LOGO)).getImage());
			getContentPane().setLayout(null);
			this.setResizable(false);
			{
				lblWarehouse = new JLabel();
				getContentPane().add(lblWarehouse);
				lblWarehouse.setBounds(25, 24, 250, 181);
				lblWarehouse.setIcon(new ImageIcon(getClass().getClassLoader().getResource(
						ApplicationConstants.IMAGES_FOLDER + "WarehousePicture.jpg")));
			}
			{
				lblUsername = new JLabel();
				getContentPane().add(lblUsername);
				lblUsername.setText("Username:");
				lblUsername.setBounds(25, 244, 62, 16);
			}
			{
				lblPassword = new JLabel();
				getContentPane().add(lblPassword);
				lblPassword.setText("Password:");
				lblPassword.setBounds(25, 278, 61, 16);
			}
			{
				txtUsername = new JTextField();
				getContentPane().add(txtUsername);
				txtUsername.setBounds(105, 242, 165, 20);
				txtUsername.setDocument(new TextFieldLimit(20));	//Maximum 20 characters
				txtUsername.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						performLogin(txtUsername.getText(), new String(txtPassword.getPassword()));
					}
				});
			}
			{
				txtPassword = new JPasswordField();
				getContentPane().add(txtPassword);
				txtPassword.setBounds(104, 276, 166, 20);
				txtPassword.setDocument(new TextFieldLimit(30));	//Maximum 30 characters
				txtPassword.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						performLogin(txtUsername.getText(), new String(txtPassword.getPassword()));
					}
				});
			}
			{
				btnLogin = new JButton();
				getContentPane().add(btnLogin);
				btnLogin.setText("Login");
				btnLogin.setBounds(123, 308, 65, 26);
				btnLogin.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						performLogin(txtUsername.getText(), new String(txtPassword.getPassword()));
					}
				});

			}
			{
				spLogin = new JSeparator();
				getContentPane().add(spLogin);
				spLogin.setBounds(12, 226, 274, 10);
			}
			pack();
			this.setSize(306, 373);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	/**
	 * End of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */


	/**
	 * Method performed when the Login button is pressed
	 * Performs login by calling login(), and informs the user if login has been successful
	 * @param username - text input to the username JTextField
	 * @param password - text input to the password JPasswordField
	 */
	private void performLogin(String username, String password){
		User user = login(username, password);
		if(user == null){
			JOptionPane.showMessageDialog(this, "Invalid username or password.", 
					"Login Error", JOptionPane.ERROR_MESSAGE);
			txtPassword.setText("");
			txtUsername.setText("");
			txtUsername.grabFocus();
		} else {
			MainScreen main = new MainScreen(user);
			main.setVisible(true);
			this.dispose();
		}
	}

	/**
	 * Compares user input for a username and password to registered users for the Login process
	 * @param username - the text input from the username JTextField
	 * @param password - the text input from the password JPasswordField
	 * @return if successful, the User that logged in. Else returns nothing
	 * @mastery achieves HL mastery factor 3 by searching the Users file 
	 * to see if the username input by the user matches an existing username
	 */
	public User login(String username, String password){

		try{
			File file = new File(ApplicationConstants.USERS_FILE);
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);

			boolean eof = false;		//stores whether the end of the file has been reached

			while(!eof){
				String line = buff.readLine();
				if (line == null){
					eof = true;		//the end of the file has been reached
				} else {
					User user = readUser(line);

					if(user.getUsername().equals(username) && user.getPassword().equals(password) 
							&& user.isEnabled() == true){
						return user;
					} else if (user.getUsername().compareTo(username)>0){	//if less than, it has not been found)
						return null;
					}
				}
			}

			buff.close();
			reader.close();
			
			return null;

		} catch(Exception e){
			return null;
		}

	}

	/**
	 * Creates a User object from a tokenized String input
	 * @param line - a line read from the Users file
	 * @return - a User object
	 */
	public User readUser(String line){
		StringTokenizer tokenizer = new StringTokenizer(line, "|");		//Tokenize string

		if (tokenizer.countTokens()== 7){ 	//preliminary error checking
			String username = tokenizer.nextToken();
			String password = tokenizer.nextToken();
			String fullName = tokenizer.nextToken();
			boolean admin = intToBoolean(new Integer(tokenizer.nextToken()).intValue());
			boolean entry = intToBoolean(new Integer(tokenizer.nextToken()).intValue());
			boolean exit = intToBoolean(new Integer(tokenizer.nextToken()).intValue());
			boolean userEnabled = intToBoolean(new Integer(tokenizer.nextToken()).intValue());

			return new User(username, password, fullName, admin, entry, exit, userEnabled);
		}

		return null;

	}

	/**
	 * Converts an int to a boolean
	 * @param 0 if false, 1 if true
	 * @return true if param is 1, else false
	 */
	public boolean intToBoolean(int i){
		return (i==1);
	}

}
