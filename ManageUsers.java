import java.awt.event.*;
import javax.swing.*;

import java.io.*;
import java.util.*;

/**
 * ---------------------------------------------------------------------
 * Warehouse Application
 * Constructs the Create User screen and handles new user creation
 * @author Alvaro Morales
 * @date 10/06/2010
 * @school Markham College
 * @IDE Eclipse SDK
 * @computer IBM ThinkPad R52
 * ---------------------------------------------------------------------
 */
public class ManageUsers extends javax.swing.JPanel {

	/**
	 * Start of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	/**
	 * GUI components generated by Jigloo
	 */
	private JLabel lblManageUsers;
	private JScrollPane scpUsers;
	private JButton btnDelete;
	private JButton btnNewUser;
	private JButton btnEdit;
	private JTable tblUsers;
	private UsersTableModel model;
	
	/**
	 * The user that logged in
	 */
	private User user;

	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Constructs a new ManageUsers object
	 */
	public ManageUsers(User user) {
		super();
		this.user = user;
		initGUI();
	}

	/**
	 * Method generated by Jigloo to initialize GUI components
	 */
	private void initGUI() {
		try {
			this.setPreferredSize(new java.awt.Dimension(800, 500));
			this.setSize(800, 500);
			this.setLayout(null);
			{
				lblManageUsers = new JLabel();
				this.add(lblManageUsers);
				lblManageUsers.setText("Manage Users");
				lblManageUsers.setBounds(12, 12, 104, 19);
				lblManageUsers.setFont(new java.awt.Font("Dialog",1,14));
			}
			{
				scpUsers = new JScrollPane();
				this.add(scpUsers);
				scpUsers.setBounds(24, 62, 754, 349);
				{
					tblUsers = new JTable();
					scpUsers.setViewportView(tblUsers);
					tblUsers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
					this.model = new UsersTableModel(getAllUsers());
					tblUsers.setModel(model);
				}
			}
			{
				btnEdit = new JButton();
				this.add(btnEdit);
				btnEdit.setText("Edit");
				btnEdit.setBounds(476, 443, 62, 26);
				btnEdit.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						openEditUserFrame();
					}
				});
			}
			{
				btnNewUser = new JButton();
				this.add(btnNewUser);
				btnNewUser.setText("New User");
				btnNewUser.setBounds(288, 443, 89, 26);
				btnNewUser.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						openNewUserFrame();
					}
				});
			}
			{
				btnDelete = new JButton();
				this.add(btnDelete);
				btnDelete.setText("Delete");
				btnDelete.setBounds(388, 443, 70, 26);
				btnDelete.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						deleteUser();
					}
				});
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * End of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	/**
	 * Creates a new NewUser() object and sets it visible.
	 * This method is called when the New User JButton is pressed
	 */
	public void openNewUserFrame(){
		NewUser newUser = new NewUser(user);
		newUser.setLocation(180, 60);
		newUser.setVisible(true);
		this.setEnabled(false);
	}

	/**
	 * Creates a new EditUser() object and sets it visible.
	 * This method is called when the Edit User JButton is pressed
	 */
	public void openEditUserFrame(){

		if(tblUsers.getSelectedRow()!= -1){
			EditUser editUser = new EditUser(model.getAllUsers()[tblUsers.getSelectedRow()]);
			editUser.setLocation(180, 60);
			editUser.setVisible(true);
			model.fireTableRowsUpdated(tblUsers.getSelectedRow(), tblUsers.getSelectedRow());
		}

	}

	/**
	 * Gets a user from a selected row and calls the performDelete() method on it
	 */
	public void deleteUser(){
		if(tblUsers.getSelectedRow() != -1){
			performDelete(model.getAllUsers()[tblUsers.getSelectedRow()]);
			System.gc();
			deleteAndRename();
			ChangeScreen.setManageUsersScreen(user);		
		}
	}

	/**
	 * Deletes a user from the Users file by writting a temporary file without the user and then renaming
	 */
	public void performDelete(User user) {
		try{
			File file = new File(ApplicationConstants.USERS_FILE);
			File tmpFile = new File(ApplicationConstants.USERS_TMP_FILE);		//Creates the temporary file
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);
			FileWriter writer = new FileWriter(tmpFile);
			BufferedWriter buffwriter = new BufferedWriter(writer);

			boolean eof = false;		//stores if the end of the file (eof) has been reached

			while(!eof){
				String line = buff.readLine();
				if(line == null){
					eof = true;		//the end of the file has been reached
				} else {
					User userInFile = readUser(line);

					if(!(userInFile.getUsername().equals(user.getUsername()))){
						buffwriter.write(userInFile.toString());
						buffwriter.newLine();
					}

				}


			}

			buffwriter.close();
			buff.close();
/**
			//Rename temporary file to old file
			file.delete();
			tmpFile.renameTo(file);
*/
			JOptionPane.showMessageDialog(this, "The user has been successfully deleted", 
					"Information", JOptionPane.INFORMATION_MESSAGE);
		} catch (Exception e){
			JOptionPane.showMessageDialog(this, "The user has not been deleted. \n" 
					+ "The files may be corrupted", "Error", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * Deletes and renames the users file
	 */
	public void deleteAndRename(){
		File file = new File(ApplicationConstants.USERS_FILE);
		File tmpFile = new File(ApplicationConstants.USERS_TMP_FILE);
		
		file.delete();
		tmpFile.renameTo(new File(ApplicationConstants.USERS_FILE));
	}

	/**
	 * Gets all the users from the file to populate the table
	 * @return a User[] of all the users from the file
	 */
	public User[] getAllUsers(){
		try{
			File file = new File(ApplicationConstants.USERS_FILE);
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);

			boolean eof = false;		//stores whether the end of the file has been reached

			int numberOfUsers = 0;

			while(!eof){
				String line = buff.readLine();
				if (line == null){
					eof = true;		//the end of the file has been reached
				} else {
					numberOfUsers++;
				}
			}

			buff.close();
			reader.close();

			FileReader reader2 = new FileReader(file);
			BufferedReader buff2 = new BufferedReader(reader2);

			User[] users = new User[numberOfUsers];

			for(int i=0;i<numberOfUsers;i++){
				String line = buff2.readLine();
				users[i] = readUser(line);
			}

			buff2.close();
			reader2.close();
			
			return users;

		} catch(Exception e){
			return null;
		}
	}

	/**
	 * Creates a User object from a tokenized String input
	 * @param line - a line read from the Users file
	 * @return - a User object
	 */
	public User readUser(String line){
		StringTokenizer tokenizer = new StringTokenizer(line, "|");		//Tokenize string

		if (tokenizer.countTokens()== 7){ 	//preliminary error checking
			String username = tokenizer.nextToken();
			String password = tokenizer.nextToken();
			String fullName = tokenizer.nextToken();
			boolean admin = intToBoolean(new Integer(tokenizer.nextToken()).intValue());
			boolean entry = intToBoolean(new Integer(tokenizer.nextToken()).intValue());
			boolean exit = intToBoolean(new Integer(tokenizer.nextToken()).intValue());
			boolean userEnabled = intToBoolean(new Integer(tokenizer.nextToken()).intValue());

			return new User(username, password, fullName, admin, entry, exit, userEnabled);
		}

		return null;

	}

	/**
	 * Converts an int to a boolean
	 * @param 0 if false, 1 if true
	 * @return true if param is 1, else false
	 */
	public boolean intToBoolean(int i){
		return (i==1);
	}

}
