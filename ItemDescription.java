import javax.imageio.ImageIO;
import javax.swing.*;

import java.awt.Image;
import java.awt.event.*;
import java.io.*;
import java.nio.channels.FileChannel;
import java.util.*;

import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.table.*;

/**
 * ---------------------------------------------------------------------
 * Warehouse Application
 * The Item Description screen to display, edit or delete the item and view transactions
 * @author Alvaro Morales
 * @date 04/07/2010
 * @school Markham College
 * @IDE Eclipse SDK
 * @computer IBM ThinkPad R52
 * ---------------------------------------------------------------------
 */
public class ItemDescription extends javax.swing.JFrame {

	/**
	 * Start of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * GUI components generated by Jigloo
	 */

	private JTabbedPane tabContainer;
	private JPanel tabDescription;
	private JPanel tabRecords;
	private JLabel lblItemInformation;
	private JTextField txtLocation;
	private JTextField txtDate;
	private JTextField txtCreatedBy;
	private JTextArea txtDescription;
	private JComboBox cmbGroup;
	private JTextArea txtName;
	private JLabel lblColumn;
	private JComboBox cmbColumn;
	private JLabel lblRow;
	private JComboBox cmbRow;
	private JComboBox cmbAisle;
	private JLabel lblAisle;
	private JLabel lblDescriptionInfo;
	private JLabel lblOptional;
	private JLabel lblNameInfo;
	private JButton btnSearch;
	private JButton btnDeleteTransaction;
	private JTextField txtUM;
	private JTextField txtGroup;
	private JLabel lblUM;
	private JComboBox cmbUM;
	private JLabel lblCodeInfo;
	private JLabel lblCode;
	private JTextField txtCode;
	private JLabel lblRequired;
	private JSeparator spRecords;
	private JComboBox cmbYearUntil;
	private JComboBox cmbMonthUntil;
	private JComboBox cmbDayUntil;
	private JLabel lblLookUntil;
	private JComboBox cmbYear;
	private JComboBox cmbMonth;
	private JComboBox cmbDay;
	private JLabel lblLookFrom;
	private JLabel lblInfo2;
	private JLabel lblInfo1;
	private JLabel lblInfo;
	private JTextField txtTotal;
	private JLabel lblTotal;
	private JTextField txtUmStockInfo;
	private JLabel lblUnitOfMeasurement;
	private JTable tblTransactions;
	private JScrollPane scpRecords;
	private JLabel lblItemRecords;
	private JSeparator spImage;
	private JButton btnChange;
	private JLabel lblItemImage;
	private JLabel lblImage;
	private JPanel tabImage;
	private JSeparator spOptions;
	private JButton btnDelete;
	private JButton btnEditing;
	private JLabel lblCreationDetails;
	private JSeparator spCreation;
	private JLabel lblLocation;
	private JLabel lblDate;
	private JLabel lblCreatedBy;
	private JLabel lblDescription;
	private JLabel lblGroup;
	private JLabel lblName;

	/**
	 * The item that is being displayed.
	 * The information in this screen belongs to this item.
	 */
	private Item item;

	/**
	 * The user that logged in
	 */
	private User user;

	/**
	 * A linked list of this item's transactions
	 */
	private TransactionList list;

	/**
	 * The current date
	 */
	private GregorianCalendar currentDate;

	/**
	 * The lower boundary for the date interval of transactions to display
	 */
	private GregorianCalendar dateStart;

	/**
	 * The upper boundary for the date interval of transactions to display
	 */
	private GregorianCalendar dateEnd;

	/**
	 * Constructs the ItemDescription screen
	 * @param item - the item that is being displayed
	 * @param user - the user that logged in
	 */
	public ItemDescription(Item item, User user) {
		super();
		this.item = item;
		this.user = user;
		currentDate = new GregorianCalendar();
		dateStart = new GregorianCalendar(ApplicationConstants.TRANSACTION_YEAR_START,1,1);	//Start date
		dateEnd = currentDate;
		populateList();
		initGUI();
		loadFields();
	}

	/**
	 * Constructs the ItemDescriptionScreen that only DISPLAYS the item image.
	 * For use in transactions processing
	 */
	public ItemDescription(Item item){
		super();
		this.item = item;
		initGUIOnlyImage();
	}

	/**
	 * Jigloo-generated method that initializes the GUI and components
	 */
	private void initGUI() {
		try {
			this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

			String title = item.getName();

			if(title.length() >= 40){
				title = title.substring(0, 40) + "...";
			}

			this.setTitle(title);
			this.setIconImage(new ImageIcon(getClass().getClassLoader().getResource(
					ApplicationConstants.WAREHOUSE_LOGO)).getImage()
			);
			getContentPane().setLayout(null);
			this.setResizable(false);
			{
				tabContainer = new JTabbedPane();
				getContentPane().add(tabContainer, "Center");
				tabContainer.setBounds(0, 0, 522, 527);
				{
					tabDescription = new JPanel();
					tabContainer.addTab("Description", tabDescription);
					tabDescription.setLayout(null);
					tabDescription.setPreferredSize(new java.awt.Dimension(517, 547));
					tabDescription.setSize(482, 541);
					{
						lblName = new JLabel();
						tabDescription.add(lblName);
						lblName.setText("Name:");
						lblName.setBounds(71, 75, 36, 13);
					}
					{
						lblGroup = new JLabel();
						tabDescription.add(lblGroup);
						lblGroup.setText("Group:");
						lblGroup.setBounds(16, 178, 41, 13);
					}
					{
						lblDescription = new JLabel();
						tabDescription.add(lblDescription);
						lblDescription.setText("Description:");
						lblDescription.setBounds(39, 210, 69, 17);
					}
					{
						lblCreatedBy = new JLabel();
						tabDescription.add(lblCreatedBy);
						lblCreatedBy.setText("Created By:");
						lblCreatedBy.setBounds(42, 411, 65, 13);
					}
					{
						lblDate = new JLabel();
						tabDescription.add(lblDate);
						lblDate.setText("On:");
						lblDate.setBounds(287, 410, 30, 15);
					}
					{
						lblLocation = new JLabel();
						tabDescription.add(lblLocation);
						lblLocation.setText("Location:");
						lblLocation.setBounds(55, 324, 52, 14);
					}
					{
						txtName = new JTextArea();
						tabDescription.add(txtName);
						txtName.setBounds(132, 77, 353, 82);
						txtName.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
						txtName.setEditable(false);
						txtName.setLineWrap(true);
						txtName.setDocument(new TextFieldLimit(200));
					}
					{
						ComboBoxModel cmbFamilyModel = new DefaultComboBoxModel(MainScreen.groups);
						cmbGroup = new JComboBox();
						tabDescription.add(cmbGroup);
						cmbGroup.setModel(cmbFamilyModel);
						cmbGroup.setBounds(64, 172, 186, 25);
						cmbGroup.setVisible(false);
					}
					{
						txtDescription = new JTextArea();
						tabDescription.add(txtDescription);
						txtDescription.setBounds(132, 210, 359, 86);
						txtDescription.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
						txtDescription.setEditable(false);
						txtDescription.setLineWrap(true);
						txtDescription.setDocument(new TextFieldLimit(200));
					}
					{
						txtCreatedBy = new JTextField();
						tabDescription.add(txtCreatedBy);
						txtCreatedBy.setBounds(119, 409, 150, 20);
						txtCreatedBy.setEditable(false);
					}
					{
						txtDate = new JTextField();
						tabDescription.add(txtDate);
						txtDate.setBounds(328, 409, 146, 18);
						txtDate.setEditable(false);
					}
					{
						txtLocation = new JTextField();
						tabDescription.add(txtLocation);
						txtLocation.setBounds(132, 321, 192, 19);
						txtLocation.setEditable(false);
						txtLocation.setSize(192, 20);
						txtLocation.setEnabled(true);
						txtLocation.setEditable(false);
						txtLocation.setVisible(true);
					}
					{
						lblItemInformation = new JLabel();
						tabDescription.add(lblItemInformation);
						lblItemInformation.setText("Item Information");
						lblItemInformation.setFont(new java.awt.Font("Dialog",1,14));
						lblItemInformation.setBounds(12, 12, 120, 16);
					}
					{
						spCreation = new JSeparator();
						tabDescription.add(spCreation);
						spCreation.setBounds(12, 364, 493, 7);
					}
					{
						lblCreationDetails = new JLabel();
						tabDescription.add(lblCreationDetails);
						lblCreationDetails.setText("Creation Details");
						lblCreationDetails.setFont(new java.awt.Font("Dialog",1,14));
						lblCreationDetails.setBounds(12, 378, 120, 13);
					}

					//Checks for user permissions: 
					//only users with Admin or Entry permissions can change/delete an item
					if(user.isAdmin() || user.isEntry()){
						{
							btnEditing = new JButton();
							tabDescription.add(btnEditing);
							btnEditing.setText("Turn Editing On");
							btnEditing.setBounds(131, 454, 120, 26);
							btnEditing.addActionListener(new ActionListener() {
								public void actionPerformed (ActionEvent e){
									enableEditing();
								}
							});

						}

						{
							btnDelete = new JButton();
							tabDescription.add(btnDelete);
							btnDelete.setText("Delete Item");
							btnDelete.setBounds(287, 454, 98, 26);
							btnDelete.addActionListener(new ActionListener() {
								public void actionPerformed (ActionEvent e){
									performDelete();
								}
							});
						}
					}
					{
						spOptions = new JSeparator();
						tabDescription.add(spOptions);
						spOptions.setBounds(12, 441, 493, 13);
					}
					{
						lblRequired = new JLabel();
						tabDescription.add(lblRequired);
						lblRequired.setText("Required");
						lblRequired.setBounds(64, 95, 54, 13);
						lblRequired.setFont(new java.awt.Font("Dialog",0,10));
						lblRequired.setVisible(false);
					}
					{
						lblNameInfo = new JLabel();
						tabDescription.add(lblNameInfo);
						lblNameInfo.setText("Max. 200 characters");
						lblNameInfo.setBounds(12, 107, 98, 15);
						lblNameInfo.setFont(new java.awt.Font("Dialog",0,10));
						lblNameInfo.setVisible(false);
					}
					{
						lblOptional = new JLabel();
						tabDescription.add(lblOptional);
						lblOptional.setText("Optional");
						lblOptional.setBounds(67, 233, 47, 12);
						lblOptional.setFont(new java.awt.Font("Dialog",0,10));
						lblOptional.setVisible(false);
					}
					{
						lblDescriptionInfo = new JLabel();
						tabDescription.add(lblDescriptionInfo);
						lblDescriptionInfo.setText("Max. 200 characters");
						lblDescriptionInfo.setBounds(12, 248, 96, 17);
						lblDescriptionInfo.setFont(new java.awt.Font("Dialog",0,10));
						lblDescriptionInfo.setVisible(false);
					}
					{
						lblAisle = new JLabel();
						tabDescription.add(lblAisle);
						lblAisle.setText("Aisle");
						lblAisle.setBounds(152, 302, 28, 16);
						lblAisle.setVisible(false);
					}
					{
						ComboBoxModel cmbAisleModel = new DefaultComboBoxModel(MainScreen.locations.getAisles());
						cmbAisle = new JComboBox();
						tabDescription.add(cmbAisle);
						cmbAisle.setModel(cmbAisleModel);
						cmbAisle.setBounds(135, 324, 63, 25);
						cmbAisle.setVisible(false);
					}
					{
						ComboBoxModel cmbRowModel = new DefaultComboBoxModel(
								MainScreen.locations.getRows());
						cmbRow = new JComboBox();
						tabDescription.add(cmbRow);
						cmbRow.setModel(cmbRowModel);
						cmbRow.setBounds(214, 324, 67, 25);
						cmbRow.setVisible(false);
					}
					{
						lblRow = new JLabel();
						tabDescription.add(lblRow);
						lblRow.setText("Row");
						lblRow.setBounds(235, 301, 25, 17);
						lblRow.setVisible(false);
					}
					{
						ComboBoxModel cmbColumnModel = new DefaultComboBoxModel(
								MainScreen.locations.getColumns());
						cmbColumn = new JComboBox();
						tabDescription.add(cmbColumn);
						cmbColumn.setModel(cmbColumnModel);
						cmbColumn.setBounds(299, 324, 67, 25);
						cmbColumn.setVisible(false);
					}
					{
						lblColumn = new JLabel();
						tabDescription.add(lblColumn);
						lblColumn.setText("Column");
						lblColumn.setBounds(311, 302, 43, 16);
						lblColumn.setVisible(false);
					}
					{
						txtCode = new JTextField();
						tabDescription.add(txtCode);
						txtCode.setBounds(132, 40, 194, 24);
						txtCode.setEditable(false);
						txtCode.setDocument(new TextFieldDigitLimit(6));
					}
					{
						lblCode = new JLabel();
						tabDescription.add(lblCode);
						lblCode.setText("Code:");
						lblCode.setBounds(74, 44, 35, 16);
					}
					{
						lblCodeInfo = new JLabel();
						tabDescription.add(lblCodeInfo);
						lblCodeInfo.setText("Required. Must be exactly 6 numbers");
						lblCodeInfo.setBounds(332, 44, 178, 16);
						lblCodeInfo.setFont(new java.awt.Font("Dialog",0,10));
						lblCodeInfo.setVisible(false);
					}
					{
						ComboBoxModel cmbUMModel = new DefaultComboBoxModel(
								MainScreen.umArray);
						cmbUM = new JComboBox();
						tabDescription.add(cmbUM);
						cmbUM.setModel(cmbUMModel);
						cmbUM.setBounds(308, 172, 195, 25);
						cmbUM.setVisible(false);
					}
					{
						lblUM = new JLabel();
						tabDescription.add(lblUM);
						tabDescription.add(getTxtGroup());
						tabDescription.add(getJTextField1());
						lblUM.setText("U.M. :");
						lblUM.setBounds(266, 176, 30, 16);
					}
				}
				{
					tabImage = new JPanel();
					tabContainer.addTab("Image", tabImage);
					tabImage.setLayout(null);
					{
						lblImage = new JLabel();
						tabImage.add(lblImage);
						lblImage.setBounds(103, 52, 320, 240);
						lblImage.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
						try {
							lblImage.setIcon(
									new ImageIcon(getClass().getClassLoader().getResource(
											"Files/Item_Images/" + item.getID() + ".jpg")));
						} catch (Exception e) {
							//Item has no Image
							lblImage.setIcon(
									new ImageIcon(getClass().getClassLoader().getResource(
									"Files/Item_Images/NoImage.jpg")));
						}
					}
					{
						lblItemImage = new JLabel();
						tabImage.add(lblItemImage);
						lblItemImage.setText("Item Image");
						lblItemImage.setFont(new java.awt.Font("Dialog",1,14));
						lblItemImage.setBounds(12, 18, 493, 16);
						lblItemImage.setAlignmentX(0.5f);
						lblItemImage.setHorizontalAlignment(SwingConstants.CENTER);
					}
					{

						btnChange = new JButton();
						tabImage.add(btnChange);
						btnChange.setText("Change Picture");
						btnChange.setBounds(205, 304, 121, 26);
						btnChange.addActionListener(new ActionListener() {
							public void actionPerformed (ActionEvent e){
								changeItemImage();
							}
						});
					}
					{
						spImage = new JSeparator();
						tabImage.add(spImage);
						spImage.setBounds(12, 344, 493, 10);
					}
				}
				{
					tabRecords = new JPanel();
					tabContainer.addTab("Stock Information", null, tabRecords, null);
					tabRecords.setLayout(null);
					{
						lblItemRecords = new JLabel();
						tabRecords.add(lblItemRecords);
						lblItemRecords.setText("Item Records");
						lblItemRecords.setFont(new java.awt.Font("Dialog",1,14));
						lblItemRecords.setBounds(12, 12, 101, 16);
					}
					{
						scpRecords = new JScrollPane();
						tabRecords.add(scpRecords);
						scpRecords.setBounds(44, 177, 431, 194);
						{
							ArrayList transactionsToDisplay = list.searchTransactions(dateStart, dateEnd);
							TransactionsTableModel tblTransactionsModel = 
								new TransactionsTableModel(transactionsToDisplay);
							tblTransactions = new JTable();
							scpRecords.setViewportView(tblTransactions);
							tblTransactions.setModel(tblTransactionsModel);
							tblTransactions.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
							setColumnWidths();
							tblTransactions.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
							if(user.isAdmin()){
								tblTransactions.getSelectionModel().addListSelectionListener(
										new ListSelectionListener(){
											public void valueChanged(ListSelectionEvent e){
												enableDeleteTransaction(e.getFirstIndex());
											}
										});
							}

						}
					}
					{
						lblUnitOfMeasurement = new JLabel();
						tabRecords.add(lblUnitOfMeasurement);
						lblUnitOfMeasurement.setText("U.M. :");
						lblUnitOfMeasurement.setBounds(144, 143, 30, 16);
					}
					{
						txtUmStockInfo = new JTextField();
						tabRecords.add(txtUmStockInfo);
						txtUmStockInfo.setBounds(186, 141, 180, 20);
						txtUmStockInfo.setEditable(false);
						txtUmStockInfo.setText(item.getUm().toString());
					}
					{
						lblTotal = new JLabel();
						tabRecords.add(lblTotal);
						lblTotal.setText("Current Balance:");
						lblTotal.setBounds(44, 389, 101, 21);
					}
					{
						txtTotal = new JTextField();
						tabRecords.add(txtTotal);
						txtTotal.setBounds(150, 389, 180, 20);
						txtTotal.setEditable(false);
						txtTotal.setText("" + Transactions.getQuantityInStock(item));
					}
					{
						lblInfo = new JLabel();
						tabRecords.add(lblInfo);
						lblInfo.setText("Information");
						lblInfo.setFont(new java.awt.Font("Dialog",1,12));
						lblInfo.setBounds(44, 428, 65, 16);
					}
					{
						lblInfo1 = new JLabel();
						tabRecords.add(lblInfo1);
						lblInfo1.setText("For entries, the 'Document' column " 
								+ "gives the number of the Proof of Reception");
						lblInfo1.setFont(new java.awt.Font("Dialog",0,10));
						lblInfo1.setBounds(44, 450, 441, 16);
					}
					{
						lblInfo2 = new JLabel();
						tabRecords.add(lblInfo2);
						lblInfo2.setText("For exits, the 'Document' column " 
								+ "gives the number of the Item Exit Voucher");
						lblInfo2.setFont(new java.awt.Font("Dialog",0,10));
						lblInfo2.setBounds(44, 463, 424, 16);
					}
					{
						lblLookFrom = new JLabel();
						tabRecords.add(lblLookFrom);
						lblLookFrom.setText("From:");
						lblLookFrom.setBounds(47, 40, 32, 16);
					}
					{
						ComboBoxModel cmbDayModel = new DefaultComboBoxModel(getArrayOfDays());
						cmbDay = new JComboBox();
						tabRecords.add(cmbDay);
						cmbDay.setModel(cmbDayModel);
						cmbDay.setBounds(94, 40, 45, 25);
					}
					{
						ComboBoxModel cmbMonthModel = new DefaultComboBoxModel(getArrayOfMonths());
						cmbMonth = new JComboBox();
						tabRecords.add(cmbMonth);
						cmbMonth.setModel(cmbMonthModel);
						cmbMonth.setBounds(151, 40, 88, 25);
					}
					{
						ComboBoxModel cmbYearModel = new DefaultComboBoxModel(getArrayOfYears());
						cmbYear = new JComboBox();
						tabRecords.add(cmbYear);
						cmbYear.setModel(cmbYearModel);
						cmbYear.setBounds(251, 40, 63, 25);
					}
					{
						lblLookUntil = new JLabel();
						tabRecords.add(lblLookUntil);
						lblLookUntil.setText("Until:");
						lblLookUntil.setBounds(51, 78, 28, 16);
					}
					{
						ComboBoxModel cmbDayUntilModel = new DefaultComboBoxModel(getArrayOfDays());
						cmbDayUntil = new JComboBox();
						tabRecords.add(cmbDayUntil);
						cmbDayUntil.setModel(cmbDayUntilModel);
						cmbDayUntil.setBounds(94, 78, 45, 25);
						cmbDayUntil.setSelectedIndex(currentDate.get(Calendar.DAY_OF_MONTH)-1);
					}
					{
						ComboBoxModel cmbMonthUntilModel = new DefaultComboBoxModel(getArrayOfMonths());
						cmbMonthUntil = new JComboBox();
						tabRecords.add(cmbMonthUntil);
						cmbMonthUntil.setModel(cmbMonthUntilModel);
						cmbMonthUntil.setBounds(151, 78, 88, 25);
						cmbMonthUntil.setSelectedIndex(currentDate.get(Calendar.MONTH));
					}
					{
						ComboBoxModel cmbYearUntilModel = new DefaultComboBoxModel(getArrayOfYears());
						cmbYearUntil = new JComboBox();
						tabRecords.add(cmbYearUntil);
						cmbYearUntil.setModel(cmbYearUntilModel);
						cmbYearUntil.setBounds(251, 78, 63, 25);
						cmbYearUntil.setSelectedIndex(
								(currentDate.get(Calendar.YEAR))%ApplicationConstants.TRANSACTION_YEAR_START);
					}
					{
						btnSearch = new JButton();
						tabRecords.add(btnSearch);
						btnSearch.setText("Search");
						btnSearch.setBounds(377, 77, 75, 26);
						btnSearch.addActionListener(new ActionListener() {
							public void actionPerformed (ActionEvent e){
								displayTransactions();
							}
						});
					}
					{
						spRecords = new JSeparator();
						tabRecords.add(spRecords);
						spRecords.setBounds(12, 122, 493, 10);
					}
					{
						//Only an admin can delete a transaction
						if(user.isAdmin()){
							btnDeleteTransaction = new JButton();
							btnDeleteTransaction.setText("Delete Record");
							btnDeleteTransaction.setBounds(353, 386, 122, 26);
							btnDeleteTransaction.setEnabled(false);
							tabRecords.add(btnDeleteTransaction);
							btnDeleteTransaction.addActionListener(new ActionListener() {
								public void actionPerformed (ActionEvent e){
									performTransactionDelete();
								}
							});
						}

					}
				}
			}
			pack();
			this.setSize(535, 561);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Adaptation of Jigloo-generated method that initializes the GUI and components
	 * Only displays the item image
	 */
	private void initGUIOnlyImage() {
		try {
			this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

			String title = item.getName();

			if(title.length() >= 40){
				title = title.substring(0, 40) + "...";
			}

			this.setTitle(title);
			this.setIconImage(
					new ImageIcon(getClass().getClassLoader().getResource(
							ApplicationConstants.WAREHOUSE_LOGO)).getImage());
			getContentPane().setLayout(null);
			this.setResizable(false);
			{
				tabContainer = new JTabbedPane();
				getContentPane().add(tabContainer, "Center");
				tabContainer.setBounds(0, 0, 522, 527);
				{
					tabImage = new JPanel();
					tabContainer.addTab("Image", tabImage);
					tabImage.setLayout(null);
					{
						lblImage = new JLabel();
						tabImage.add(lblImage);
						lblImage.setBounds(103, 52, 320, 240);
						lblImage.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
						try {
							lblImage.setIcon(
									new ImageIcon(getClass().getClassLoader().getResource(
											"Files/Item_Images/" + item.getID() + ".jpg")));
						} catch (Exception e) {
							//Item has no Image
							lblImage.setIcon(
									new ImageIcon(getClass().getClassLoader().getResource(
									"Files/Item_Images/NoImage.jpg")));
						}
					}
					{
						lblItemImage = new JLabel();
						tabImage.add(lblItemImage);
						lblItemImage.setText("Item Image");
						lblItemImage.setFont(new java.awt.Font("Dialog",1,14));
						lblItemImage.setBounds(12, 18, 493, 16);
						lblItemImage.setAlignmentX(0.5f);
						lblItemImage.setHorizontalAlignment(SwingConstants.CENTER);
					}
					{
						spImage = new JSeparator();
						tabImage.add(spImage);
						spImage.setBounds(12, 324, 493, 10);
					}
				}
			}
			pack();
			this.setSize(535, 561);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private JTextField getTxtGroup() {
		if(txtGroup == null) {
			txtGroup = new JTextField();
			txtGroup.setBounds(65, 172, 183, 20);
			txtGroup.setEditable(false);
			txtGroup.setSize(183, 24);
		}
		return txtGroup;
	}

	private JTextField getJTextField1() {
		if(txtUM == null) {
			txtUM = new JTextField();
			txtUM.setBounds(309, 173, 194, 20);
			txtUM.setEditable(false);
			txtUM.setSize(194, 24);
		}
		return txtUM;
	}

	/**
	 * End of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	/**
	 * Loads the fields with the appropriate data
	 */
	public void loadFields(){
		txtCode.setText("" + item.getCode());
		txtName.setText(item.getName());
		txtDescription.setText(item.getDescription());
		cmbAisle.setSelectedIndex(item.getLocation().getAisle()-1);
		cmbColumn.setSelectedIndex(item.getLocation().getColumn()-1);
		cmbRow.setSelectedIndex(item.getLocation().getRow()-'A');
		txtLocation.setText(item.getLocation().toString());
		txtCreatedBy.setText(item.getCreatedBy());
		int day = item.getCreationDate().get(Calendar.DAY_OF_MONTH);
		int month = item.getCreationDate().get(Calendar.MONTH);
		int year = item.getCreationDate().get(Calendar.YEAR);
		String date = day + "/" + month + "/" + year;
		txtDate.setText(date);
		cmbGroup.setSelectedItem(item.getGroup());
		cmbUM.setSelectedItem(item.getUm());
		txtGroup.setText(item.getGroup().toString());
		txtUM.setText(item.getUm().toString());
	}

	/**
	 * Gets an Item object from the updated fields. Some fields do not change
	 * @return an Item object from the updated fields
	 */
	public Item getItemFromUpdatedFields(){
		int ID = item.getID();
		String code = txtCode.getText();
		String name = txtName.getText();
		Group group = ((Group)cmbGroup.getSelectedItem());
		UM um = ((UM)cmbUM.getSelectedItem());
		String description = txtDescription.getText();
		String createdBy = item.getCreatedBy();
		GregorianCalendar creationDate = item.getCreationDate();
		Location location = new Location((
				(Integer)cmbAisle.getSelectedItem()).byteValue(), 
				((Integer)cmbColumn.getSelectedItem()).byteValue(), 
				((String)cmbRow.getSelectedItem()).charAt(0)
		);

		Item item = new Item(ID, code, name, group, um, description, location, createdBy, creationDate);

		return item;
	}

	/**
	 * Updates an Item in the Items Random Access File and indexes
	 * @param oldCode - the previous code
	 * @param oldName - the previous name
	 * @param item - the item to be updated
	 */
	public void updateItem(String oldCode, String oldName, Item item){
		try{
			RandomAccessFile itemsFile = new RandomAccessFile(ApplicationConstants.ITEMS_FILE, "rw");
			itemsFile.seek(item.getID() * ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);
			item.writeItemToFile(itemsFile);
			updateCodeIndexFile(oldCode, item);
			updateNameIndex(oldName, item);

			MainScreen.codeIndexTree.deleteIndex(MainScreen.codeIndexTree.getNode(oldCode));
			MainScreen.nameIndexTree.deleteIndex(MainScreen.nameIndexTree.getNode(oldName));

			MainScreen.codeIndexTree.insertIndex(new IndexTNode(new Index(item.getID(), item.getCode())));
			MainScreen.nameIndexTree.insertIndex(new IndexTNode(new Index(item.getID(), item.getName())));
		} catch (Exception e){

		}


	}

	/**
	 * Deletes an Item from the Items Random Access File and indexes
	 * @param item - the item to delete
	 * @mastery method achieves HL mastery factor 2 by deleting an Item from the Items Random Access File 
	 * by manipulating the file pointer using the seek method and flagging the item as deleted
	 */
	public void deleteItem(Item item){
		try{
			RandomAccessFile itemsFile = new RandomAccessFile(ApplicationConstants.ITEMS_FILE, "rw");
			itemsFile.seek(item.getID() * ApplicationConstants.ITEMS_FILE_RECORD_LENTGTH);
			itemsFile.writeInt(-999);
			itemsFile.close();
			deleteCodeIndex(item);
			deleteNameIndex(item);
			MainScreen.codeIndexTree.deleteIndex(MainScreen.codeIndexTree.getNode(item.getCode()));
			MainScreen.nameIndexTree.deleteIndex(MainScreen.nameIndexTree.getNode(item.getName()));
		} catch (Exception e){

		}
	}

	/**
	 * Updates an Item in the Index file by name
	 * @param oldCode - the previous name
	 * @param item - the item to update
	 */
	public void updateNameIndex(String oldName, Item item){
		try{
			File file = new File(ApplicationConstants.NAME_INDEX_FILE);
			File tmpFile = new File(ApplicationConstants.TMP_NAME_INDEX_FILE);	//temporary file
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);
			FileWriter writer = new FileWriter(tmpFile);
			BufferedWriter buffwriter = new BufferedWriter(writer);

			boolean eof = false;		//stores if the end of the file (eof) has been reached

			while(!eof){
				String line = buff.readLine();
				if(line == null){
					eof = true;		//the end of the file has been reached
				} else {
					if(line.equals(oldName + "|" + item.getID())){
						buffwriter.write("" + new Index(item.getID(), item.getName()).toString());
						buffwriter.newLine();
					} else {
						buffwriter.write(line);
						buffwriter.newLine();
					}
				}
			}

			buffwriter.close();
			buff.close();

			//Rename temporary file to old file
			file.delete();
			tmpFile.renameTo(file);

		} catch (Exception e){

		}
	}

	/**
	 * Updates an Item in the Index file by code
	 * @param oldCode - the previous code
	 * @param item - the item to update
	 */
	public void updateCodeIndexFile(String oldCode, Item item){
		try{
			File file = new File(ApplicationConstants.CODE_INDEX_FILE);
			File tmpFile = new File(ApplicationConstants.TMP_CODE_INDEX_FILE);	//temporary file
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);
			FileWriter writer = new FileWriter(tmpFile);
			BufferedWriter buffwriter = new BufferedWriter(writer);

			boolean eof = false;		//stores if the end of the file (eof) has been reached

			while(!eof){
				String line = buff.readLine();
				if(line == null){
					eof = true;		//the end of the file has been reached
				} else {
					if(line.equals(oldCode + "|" + item.getID())){
						buffwriter.write("" + new Index(item.getID(), item.getCode()).toString());
						buffwriter.newLine();
					} else {
						buffwriter.write(line);
						buffwriter.newLine();
					}
				}
			}

			buffwriter.close();
			buff.close();

			//Rename temporary file to old file
			file.delete();
			tmpFile.renameTo(file);

		} catch (Exception e){

		}
	}

	/**
	 * Deletes an Item from the Index file by name
	 * @param item - the item to delete
	 */
	public void deleteNameIndex(Item item){
		try{
			File file = new File(ApplicationConstants.NAME_INDEX_FILE);
			File tmpFile = new File(ApplicationConstants.TMP_NAME_INDEX_FILE);	//the temporary file
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);
			FileWriter writer = new FileWriter(tmpFile);
			BufferedWriter buffwriter = new BufferedWriter(writer);

			boolean eof = false;		//stores if the end of the file (eof) has been reached

			while(!eof){
				String line = buff.readLine();
				if(line == null){
					eof = true;		//the end of the file has been reached
				} else {
					if(!line.equals(item.getName() + "|" + item.getID())) {
						buffwriter.write(line);
						buffwriter.newLine();
					} 
				}
			}

			buffwriter.close();
			buff.close();

			//Rename temporary file to old file
			file.delete();
			tmpFile.renameTo(file);

		} catch (Exception e){

		}
	}

	/**
	 * Deletes an Item from the Index file by code
	 * @param item - the item to delete
	 * @mastery achieves HL mastery factor 18 by deleting an index by code from the CodeIndex sequential 
	 * file without reading the entire file into RAM
	 */
	public void deleteCodeIndex(Item item){
		try{
			File file = new File(ApplicationConstants.CODE_INDEX_FILE);
			File tmpFile = new File(ApplicationConstants.TMP_CODE_INDEX_FILE);		//Creates the temporary file
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);
			FileWriter writer = new FileWriter(tmpFile);
			BufferedWriter buffwriter = new BufferedWriter(writer);

			boolean eof = false;		//stores if the end of the file (eof) has been reached

			while(!eof){
				String line = buff.readLine();
				if(line == null){
					eof = true;		//the end of the file has been reached
				} else {
					if(!line.equals(item.getCode() + "|" + item.getID())) {
						buffwriter.write(line);
						buffwriter.newLine();
					} 
				}
			}

			buffwriter.close();
			buff.close();

			//Rename temporary file to old file
			file.delete();
			tmpFile.renameTo(file);

		} catch (Exception e){

		}
	}

	/**
	 * Asks the user for confirmation, and if so deletes the item
	 */
	public void performDelete(){
		int userResponse = JOptionPane.showConfirmDialog(
				this, "The item will be permanently \ndeleted. Continue?", "Delete Item", 
				JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
		if(userResponse == JOptionPane.YES_OPTION){
			deleteItem(item);
			try {
				File transactions = new File(
						ApplicationConstants.TRANSACTIONS_FOLDER + item.getID() + ".txt");
				transactions.delete();
				File image = new File(ApplicationConstants.ITEM_IMAGES_FOLDER + item.getID() + ".jpg");
				image.delete();
			} catch (Exception e) {
				//One of the files may not exist
			}
			JOptionPane.showMessageDialog(
					this, "The item has been deleted", "Success", JOptionPane.INFORMATION_MESSAGE);
			this.dispose();
			ChangeScreen.setBlankScreen(user);
		}
	}

	/**
	 * Validates the user input
	 * @return true if input is valid, else false
	 */
	public boolean isCorrectInput(){

		if(!txtName.getText().equals("") 
				|| !txtName.getText().equals(null) && txtCode.getText().length() == 6){
			return true;
		} else {
			return false;
		}

	}

	/**
	 * Enables GUI components for editing
	 */
	public void turnEditingOn() {
		btnEditing.setText("Save Changes");
		txtCode.setEditable(true);
		lblCodeInfo.setVisible(true);
		txtName.setEditable(true);
		txtDescription.setEditable(true);
		cmbUM.setVisible(true);
		cmbGroup.setVisible(true);
		txtUM.setVisible(false);
		txtGroup.setVisible(false);
		txtLocation.setVisible(false);
		cmbAisle.setVisible(true);
		lblAisle.setVisible(true);
		cmbRow.setVisible(true);
		lblRow.setVisible(true);
		cmbColumn.setVisible(true);
		lblColumn.setVisible(true);
		lblRequired.setVisible(true);
		lblNameInfo.setVisible(true);
		lblOptional.setVisible(true);
		lblDescriptionInfo.setVisible(true);
	}

	/**
	 * Disables GUI components for only viewing
	 */
	public void turnEditingOff(){
		btnEditing.setText("Turn Editing On");
		txtCode.setEditable(false);
		lblCodeInfo.setVisible(false);
		txtName.setEditable(false);
		txtDescription.setEditable(false);
		cmbUM.setVisible(false);
		cmbGroup.setVisible(false);
		txtUM.setVisible(true);
		txtGroup.setVisible(true);
		txtLocation.setVisible(true);
		txtLocation.setEnabled(true);
		txtLocation.setEditable(false);
		cmbAisle.setVisible(false);
		lblAisle.setVisible(false);
		cmbRow.setVisible(false);
		lblRow.setVisible(false);
		cmbColumn.setVisible(false);
		lblColumn.setVisible(false);
		lblRequired.setVisible(false);
		lblNameInfo.setVisible(false);
		lblOptional.setVisible(false);
		lblDescriptionInfo.setVisible(false);
	}

	/**
	 * Enables or disabled GUI components for editing or viewing
	 */
	public void enableEditing(){
		boolean isEditable = txtName.isEditable();

		if(!isEditable){
			turnEditingOn();
			this.validate();
			tabDescription.validate();
			this.repaint();
			tabDescription.repaint();
		} else {
			if(isCompleteInput()){
				turnEditingOff();		
				int userResponse = JOptionPane.showConfirmDialog(
						this, "This will permanently update the \nitem. Continue?", "Update Item", 
						JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);

				if(userResponse == JOptionPane.YES_OPTION){
					byte aisle = ((Integer)cmbAisle.getSelectedItem()).byteValue();
					char row = ((String)cmbRow.getSelectedItem()).charAt(0);
					byte column = ((Integer)cmbColumn.getSelectedItem()).byteValue();
					Location location = new Location(aisle, column, row);
					ArrayList itemsInLocation = Items.searchByLocation(location);

					for(int i=0;i<itemsInLocation.size();i++){
						if(((Item)itemsInLocation.get(i)).getID() == item.getID()){
							itemsInLocation.remove(i);
						}
					}

					if(itemsInLocation == null || itemsInLocation.isEmpty()){
						updateItem(item.getCode(), item.getName(), getItemFromUpdatedFields());
						this.item = getItemFromUpdatedFields();
						loadFields();
						this.validate();
						tabDescription.validate();
						this.repaint();
						tabDescription.repaint();
						JOptionPane.showMessageDialog(
								this, "The item has been updated", "Success", JOptionPane.INFORMATION_MESSAGE);
					} else {
						String items = "The following items are stored in the location " + location.toString() 
						+ ": \n";
						for(int i=0;i<itemsInLocation.size();i++){
							Item item = (Item)itemsInLocation.get(i);
							String itemName = item.getName();
							if(itemName.length()>40){
								itemName = itemName.substring(0, 19) + "...";
							}
							items = items + "\n" + (i+1) + ". " + itemName;
						}

						items = items + "\n" + "\n" + "Assign this location to the new item anyway?";

						int userResponseLocation = JOptionPane.showConfirmDialog(
								this, items, "Location Taken", 
								JOptionPane.YES_NO_OPTION);
						if(userResponseLocation == JOptionPane.YES_OPTION){
							updateItem(item.getCode(), item.getName(), getItemFromUpdatedFields());
							this.item = getItemFromUpdatedFields();
							loadFields();
							this.validate();
							tabDescription.validate();
							this.repaint();
							tabDescription.repaint();
							JOptionPane.showMessageDialog(
									this, "The item has been updated", "Success", JOptionPane.INFORMATION_MESSAGE);
						} else {
							loadFields();
							JOptionPane.showMessageDialog(
									this, "The item has not been updated", "No change", JOptionPane.ERROR_MESSAGE);
						}
					}

				} else {
					loadFields();
					JOptionPane.showMessageDialog(
							this, "The item has not been updated", "No change", JOptionPane.ERROR_MESSAGE);
				}
			} else {
				JOptionPane.showMessageDialog(
						this, "Some fields are missing or incorrect", "Error", JOptionPane.ERROR_MESSAGE);
			}

		}

	}

	/**
	 * Populates the transactions list with all transactions from the file
	 */
	public void populateList(){
		list = new TransactionList();

		try{
			File file = new File(ApplicationConstants.TRANSACTIONS_FOLDER + item.getID() + ".txt");
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);

			boolean eof = false;	//stores whether the end of the file has been reached

			while(!eof){
				String line = buff.readLine();

				if(line == null){
					eof = true;
				} else {
					list.addToHead(new TransactionNode(Transactions.readTransaction(item, line)));
				}
			}	
			buff.close();
		} catch (Exception e){

		}

	}

	/**
	 * Gets a String array of the days in a month
	 * @return a String array of the days in a month
	 */
	public String[] getArrayOfDays(){
		String[] days = new String[31];

		for (int i=0;i<days.length;i++){
			days[i] = ("" + (i+1));
		}

		return days;
	}

	/**
	 * Gets a String array of the months in a year
	 * @return a String array of the names of months in a year
	 */
	public String[] getArrayOfMonths(){
		String[] months = new String[12];

		months[0] = "January";
		months[1] = "February";
		months[2] = "March";
		months[3] = "April";
		months[4] = "May";
		months[5] = "June";
		months[6] = "July";
		months[7] = "August";
		months[8] = "September";
		months[9] = "October";
		months[10] = "November";
		months[11] = "December";

		return months;
	}

	/**
	 * Gets a String array of the years from when the transactions start to be recorded to the current year
	 * @return a String array of year numbers
	 */
	public String[] getArrayOfYears(){
		GregorianCalendar currentDate = new GregorianCalendar();
		int currentYear = currentDate.get(Calendar.YEAR);
		int startYear = ApplicationConstants.TRANSACTION_YEAR_START;
		String[] years = new String[currentYear - startYear + 1];

		for(int i=0;i<years.length;i++){
			years[i] = ("" + (startYear));
			startYear = startYear+1;
		}

		return years;

	}

	/**
	 * Sets the width of the Transactions table columns
	 */
	public void setColumnWidths(){
		//Set Column "Date" width
		int vColIndex = 0;
		TableColumn colDate = tblTransactions.getColumnModel().getColumn(vColIndex);
		int width = 100;
		colDate.setPreferredWidth(width);

		//Set Column "Type" width
		TableColumn colType = tblTransactions.getColumnModel().getColumn(1);
		colType.setPreferredWidth(70);

		//Set Column "Quantity" width
		TableColumn colQuantity = tblTransactions.getColumnModel().getColumn(2);
		colQuantity.setPreferredWidth(70);

		//Set Column "Balance" width
		TableColumn colBalance = tblTransactions.getColumnModel().getColumn(3);
		colBalance.setPreferredWidth(74);

		//Set Column "Document" width
		TableColumn colDocument = tblTransactions.getColumnModel().getColumn(4);
		colDocument.setPreferredWidth(114);

		//Set Column "Delivered By" width
		TableColumn colDeliveredBy = tblTransactions.getColumnModel().getColumn(5);
		colDeliveredBy.setPreferredWidth(140);

		//Set Column "Delivered By" width
		TableColumn colRequestedBy = tblTransactions.getColumnModel().getColumn(6);
		colRequestedBy.setPreferredWidth(144);	

		//Set Column "Delivered By" width
		TableColumn colStaff = tblTransactions.getColumnModel().getColumn(7);
		colStaff.setPreferredWidth(143);
	}

	/**
	 * Displays transactions in the Transactions table from the date range that the user chooses
	 */
	public void displayTransactions(){
		//Start date
		int dayStart = new Integer((String)cmbDay.getSelectedItem()).intValue();
		int monthStart = cmbMonth.getSelectedIndex()+1;
		int yearStart = new Integer((String)cmbYear.getSelectedItem()).intValue();
		GregorianCalendar dateFrom = new GregorianCalendar(yearStart, monthStart, dayStart);

		//End date
		int dayEnd = new Integer((String)cmbDayUntil.getSelectedItem()).intValue();
		int monthEnd = cmbMonthUntil.getSelectedIndex()+1;
		int yearEnd = new Integer((String)cmbYearUntil.getSelectedItem()).intValue();
		GregorianCalendar dateTo = new GregorianCalendar(yearEnd, monthEnd, dayEnd);

		if(dateFrom.compareTo(dateTo)<=0){
			ArrayList transactionsToDisplay = list.searchTransactions(dateFrom, dateTo);
			TransactionsTableModel tblTransactionsModel = new TransactionsTableModel(transactionsToDisplay);
			tblTransactions.setModel(tblTransactionsModel);
			tblTransactions.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
			setColumnWidths();
			tblTransactions.validate();
		} else {
			JOptionPane.showMessageDialog(
					this, "You have entered an invalid date range", "Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * Deletes a Transaction
	 */
	public void performTransactionDelete(){
		int userResponse = JOptionPane.showConfirmDialog(
				this, "This transaction will be permanently \ndeleted. Continue?", 
				"Delete Transaction", JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
		if(userResponse == JOptionPane.YES_OPTION){
			int row = tblTransactions.getSelectedRow();
			TransactionsTableModel model = (TransactionsTableModel)tblTransactions.getModel();
			TransactionRecord transactionToDelete = 
				(TransactionRecord) model.getTransactionsToDisplay().get(row);	//The transaction to delete
			deleteTransactionFromFile(transactionToDelete);
			list.deleteTransaction(list.getNode(transactionToDelete.getID()));

			//Update table
			ArrayList transactionsToDisplay = list.searchTransactions(dateStart, dateEnd);
			TransactionsTableModel tblTransactionsModel = 
				new TransactionsTableModel(transactionsToDisplay);
			tblTransactions.setModel(tblTransactionsModel);
			tblTransactions.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
			setColumnWidths();
			tblTransactions.validate();
			JOptionPane.showMessageDialog(
					this, "The transaction has been deleted", "Success", JOptionPane.INFORMATION_MESSAGE);
		}

	}

	/**
	 * Deletes a TransactionRecord from the Transactions file for this item
	 * @param transactionToDelete - the transaction to delete
	 */
	public void deleteTransactionFromFile(TransactionRecord transactionToDelete){
		try{
			File file = new File(ApplicationConstants.TRANSACTIONS_FOLDER + this.item.getID() + ".txt");
			File tmpFile = new File(
					ApplicationConstants.TRANSACTIONS_FOLDER + this.item.getID() + "_tmp" + ".txt");	
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);
			FileWriter writer = new FileWriter(tmpFile);
			BufferedWriter buffwriter = new BufferedWriter(writer);

			boolean eof = false;		//stores if the end of the file (eof) has been reached

			while(!eof){
				String line = buff.readLine();
				if(line == null){
					eof = true;		//the end of the file has been reached
				} else {
					TransactionRecord currentTransaction = Transactions.readTransaction(this.item, line);
					if(currentTransaction.getID() != transactionToDelete.getID()) {
						buffwriter.write(line);
						buffwriter.newLine();
					} 
				}
			}

			buffwriter.close();
			buff.close();

			//Rename temporary file to old file
			file.delete();
			tmpFile.renameTo(file);

		} catch (Exception e){

		}
	}

	/**
	 * Enables the delete transaction button
	 * @param i - the value from a row selection (-1 if no row is selected)
	 */
	public void enableDeleteTransaction(int i){
		if(i<0){
			btnDeleteTransaction.setEnabled(false);
		} else {
			btnDeleteTransaction.setEnabled(true);
		}
	}

	/**
	 * Validates the user input
	 * @return true if input is valid, else false
	 */
	public boolean isCompleteInput(){

		if(!txtName.getText().equals("") || !txtName.getText().equals(null) 
				&& txtCode.getText().length() == 6){
			return true;
		} else {
			return false;
		}

	}

	/**
	 * Gets an image from the File that the user selected and displays it in the Item Image box
	 * @return the new image file, or null if no change
	 */
	public File getAndDisplayImage(){
		//Get and Display a File Chooser
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setAcceptAllFileFilterUsed(false);
		fileChooser.setFileFilter(new JpgFilter());
		fileChooser.setDialogTitle("Choose an item image");
		int returnValue = fileChooser.showOpenDialog(this);

		if (returnValue == JFileChooser.APPROVE_OPTION){
			if(fileChooser.getSelectedFile() != null){
				File file = fileChooser.getSelectedFile();
				try{
					Image image = ImageIO.read(file);
					lblImage.setIcon(new ImageIcon(image));
					return file;
				} catch (Exception e){

				}
			}
		}

		return null;

	}

	/**
	 * Changes an item's image
	 */
	public void changeItemImage(){

		File file = getAndDisplayImage();
		if(file!=null){			
			try{
				File oldImage = new File(ApplicationConstants.ITEM_IMAGES_FOLDER + item.getID() + ".jpg");
				oldImage.exists();
				oldImage.delete();
			} catch (Exception e){
				//if the file doesn't exist
				e.printStackTrace();
			}

			try{
				File newImageFile = copyFile(file, ApplicationConstants.ITEM_IMAGES_FOLDER);
				newImageFile.renameTo(new File(ApplicationConstants.ITEM_IMAGES_FOLDER + item.getID() + ".jpg"));
			} catch (Exception e){
				e.printStackTrace();
			}
		}

	}

	public void displayMessage(){
		JOptionPane.showMessageDialog(
				MainScreen.contentPane, "One or files cannot be accessed. \n" 
				+ "Contact the system administrator.", "Error", JOptionPane.ERROR_MESSAGE);
	}

	/**
	 * Copies a file to a destination
	 * @author Vinod Singh, with modifications by Alvaro Morales
	 * @authorswebsite http://blog.vinodsingh.com/2009/06/copy-move-and-delete-files-using-java.html
	 * @date 12 June 2009
	 * @param file - the file to copy
	 * @param destination - the destination path of the file
	 * @return the file that has been copied
	 * @throws IOException if file accessing does not work
	 */
	public File copyFile(File file, String destination) throws IOException {  
		FileChannel in = null;  
		FileChannel out = null;  
		try {  
			in = new FileInputStream(file).getChannel();  
			File outFile = new File(destination, file.getName());  
			out = new FileOutputStream(outFile).getChannel();  
			in.transferTo(0, in.size(), out);  
			return outFile;
		} finally {  
			if (in != null)  
				in.close();  
			if (out != null)  
				out.close();  
		}  

	}  


}
