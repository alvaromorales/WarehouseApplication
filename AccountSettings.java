import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

/**
 * ---------------------------------------------------------------------
 * Warehouse Application
 * Constructs the Account Settings screen and handles the operations to change a user's password
 * @author Alvaro Morales
 * @date 10/06/2010
 * @school Markham College
 * @IDE Eclipse SDK
 * @computer IBM ThinkPad R52
 * ---------------------------------------------------------------------
 */
public class AccountSettings extends javax.swing.JFrame {

	/**
	 * GUI components generated by Jigloo
	 */
	private JLabel lblAccountSettings;
	private JButton btnChangePassword;
	private JPasswordField txtConfirmPassword;
	private JPasswordField txtNewPassword;
	private JPasswordField txtCurrentPassword;
	private JLabel lblConfirm;
	private JLabel lblNewPassword;
	private JLabel lblCurrentPassword;

	/**
	 * The user that logged in
	 */
	private User user;

	/**
	 * Start of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */
	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Constructs a new AccountSettings object
	 * @param user - the user that logged in
	 */
	public AccountSettings(User user) {
		super();
		this.user = user;
		initGUI();
	}

	/**
	 * Method generated by Jigloo to initialize GUI components
	 */
	private void initGUI() {
		try {
			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			getContentPane().setLayout(null);
			this.setTitle("Account Settings");
			this.setIconImage(new ImageIcon(getClass().getClassLoader().getResource(
					ApplicationConstants.PASSWORD_ICON)).getImage()
			);
			{
				lblAccountSettings = new JLabel();
				getContentPane().add(lblAccountSettings);
				lblAccountSettings.setText("Change Password");
				lblAccountSettings.setBounds(12, 12, 131, 16);
				lblAccountSettings.setFont(new java.awt.Font("Dialog",1,14));
			}
			{
				lblCurrentPassword = new JLabel();
				getContentPane().add(lblCurrentPassword);
				lblCurrentPassword.setText("Current Password:");
				lblCurrentPassword.setBounds(44, 48, 107, 16);
			}
			{
				lblNewPassword = new JLabel();
				getContentPane().add(lblNewPassword);
				lblNewPassword.setText("New Password:");
				lblNewPassword.setBounds(62, 86, 89, 16);
			}
			{
				lblConfirm = new JLabel();
				getContentPane().add(lblConfirm);
				lblConfirm.setText("Confirm Password:");
				lblConfirm.setBounds(40, 122, 111, 16);
			}
			{
				txtCurrentPassword = new JPasswordField();
				getContentPane().add(txtCurrentPassword);
				txtCurrentPassword.setBounds(163, 46, 156, 20);
			}
			{
				txtNewPassword = new JPasswordField();
				getContentPane().add(txtNewPassword);
				txtNewPassword.setBounds(163, 84, 156, 20);
			}
			{
				txtConfirmPassword = new JPasswordField();
				getContentPane().add(txtConfirmPassword);
				txtConfirmPassword.setBounds(163, 120, 156, 20);
			}
			{
				btnChangePassword = new JButton();
				getContentPane().add(btnChangePassword);
				btnChangePassword.setText("Change");
				btnChangePassword.setBounds(138, 155, 77, 26);
				btnChangePassword.addActionListener(new ActionListener() {
					public void actionPerformed (ActionEvent e){
						changePassword(
								new String(txtCurrentPassword.getPassword()), 
								new String(txtNewPassword.getPassword()), 
								new String(txtConfirmPassword.getPassword())
						);
					}
				});
			}
			pack();
			this.setSize(351, 219);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * End of the code generated using CloudGarden's Jigloo SWT/Swing GUI Builder
	 */

	/**
	 * Checks if the information entered in the JPasswordFields is correct. 
	 * If so, it calls the performChange() method to change a user's password.
	 * @param currentPassword - the user's password
	 * @param newPassword - the new password
	 * @param confirmPassword - a confirmation of the new password (must be exactly equal to newPassword)
	 */
	public void changePassword(String currentPassword, String newPassword, String confirmPassword){

		try{
			if(user.getPassword().equals(currentPassword) && (newPassword.equals(confirmPassword))){
				performChange(newPassword);
				JOptionPane.showMessageDialog(this, "Password successfully changed", 
						"Information", JOptionPane.INFORMATION_MESSAGE);
				this.dispose();
			} else {
				JOptionPane.showMessageDialog(this, "Some fields are missing or the \ninformation " +
						"entered is erroneous.", "Error", JOptionPane.ERROR_MESSAGE);
				txtCurrentPassword.setText("");
				txtNewPassword.setText("");
				txtConfirmPassword.setText("");
			}

		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "The password has not been changed. \n" +
					"The files may be corrupted", "Error", JOptionPane.ERROR_MESSAGE);
			this.dispose();
		}

	}

	/**
	 * Changes the password of a user in the file
	 * @param newPassword - the new password
	 */
	public void performChange(String newPassword) throws IOException {
		try{

			this.user.setPassword(newPassword);

			File file = new File(ApplicationConstants.USERS_FILE);
			File tmpFile = new File(ApplicationConstants.USERS_TMP_FILE);	//Creates the temporary file
			FileReader reader = new FileReader(file);
			BufferedReader buff = new BufferedReader(reader);
			FileWriter writer = new FileWriter(tmpFile);
			BufferedWriter buffwriter = new BufferedWriter(writer);

			boolean eof = false;                //stores if the end of the file (eof) has been reached

			while(!eof){
				String line = buff.readLine();
				if(line == null){
					eof = true;                //the end of the file has been reached
				} else {
					User userInFile = readUser(line);

					//The file is already ordered, so no further validation is necessary
					if(userInFile.getUsername().equals(this.user.getUsername())){
						buffwriter.write(user.toString());
						buffwriter.newLine();
					} else {
						buffwriter.write(userInFile.toString());
						buffwriter.newLine();
					}

				}

			}

			buffwriter.close();
			buff.close();
			reader.close();
			writer.close();

			//Rename temporary file to old file
			file.delete();
			tmpFile.renameTo(file);

		} catch (Exception e){

		}
	}

	/**
	 * Creates a User object from a tokenized String input
	 * @param line - a line read from the Users file
	 * @return - a User object
	 */
	public User readUser(String line){
		StringTokenizer tokenizer = new StringTokenizer(line, "|");                //Tokenize string

		if (tokenizer.countTokens()== 7){         //preliminary error checking
			String username = tokenizer.nextToken();
			String password = tokenizer.nextToken();
			String fullName = tokenizer.nextToken();
			boolean admin = intToBoolean(new Integer(tokenizer.nextToken()).intValue());
			boolean entry = intToBoolean(new Integer(tokenizer.nextToken()).intValue());
			boolean exit = intToBoolean(new Integer(tokenizer.nextToken()).intValue());
			boolean userEnabled = intToBoolean(new Integer(tokenizer.nextToken()).intValue());

			return new User(username, password, fullName, admin, entry, exit, userEnabled);
		}

		return null;

	}

	/**
	 * Converts an int to a boolean
	 * @param 0 if false, 1 if true
	 * @return true if param is 1, else false
	 */
	public boolean intToBoolean(int i){
		return (i==1);
	}

}